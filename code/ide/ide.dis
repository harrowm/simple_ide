
ide.elf:     file format elf32-m68k


Disassembly of section .text.init:

00002000 <_init>:
    2000:	41fa fffe      	lea %pc@(2000 <_init>),%a0
    2004:	43f9 0000 2000 	lea 2000 <_init>,%a1
    200a:	203c 0000 20ac 	movel #8364,%d0
    2010:	9089           	subl %a1,%d0
    2012:	e488           	lsrl #2,%d0
    2014:	5380           	subql #1,%d0
    2016:	22d8           	movel %a0@+,%a1@+
    2018:	51c8 fffc      	dbf %d0,2016 <_init+0x16>
    201c:	4ef9 0000 2024 	jmp 2024 <_postinit>

Disassembly of section .text.postinit:

00002024 <_postinit>:
    2024:	203c 0000 3c90 	movel #15504,%d0
    202a:	9089           	subl %a1,%d0
    202c:	e488           	lsrl #2,%d0
    202e:	2200           	movel %d0,%d1
    2030:	4841           	swap %d1
    2032:	6002           	bras 2036 <_postinit+0x12>
    2034:	22d8           	movel %a0@+,%a1@+
    2036:	51c8 fffc      	dbf %d0,2034 <_postinit+0x10>
    203a:	51c9 fff8      	dbf %d1,2034 <_postinit+0x10>

0000203e <_start>:
    203e:	2e78 0414      	moveal 414 <SDB_MEMSIZE>,%sp
    2042:	41f9 0000 35de 	lea 35de <__kinit>,%a0
    2048:	4e90           	jsr %a0@
    204a:	611c           	bsrs 2068 <CALL_CTORS>
    204c:	41f9 0000 2452 	lea 2452 <kmain>,%a0
    2052:	4e90           	jsr %a0@

00002054 <exit>:
    2054:	42a7           	clrl %sp@-
    2056:	41f9 0000 360a 	lea 360a <__cxa_finalize>,%a0
    205c:	4e90           	jsr %a0@
    205e:	588f           	addql #4,%sp
    2060:	6128           	bsrs 208a <CALL_DTORS>
    2062:	2078 0490      	moveal 490 <EFP_PROG_EXIT>,%a0
    2066:	4ed0           	jmp %a0@

00002068 <CALL_CTORS>:
    2068:	48e7 0038      	moveml %a2-%a4,%sp@-
    206c:	45f9 0000 3c88 	lea 3c88 <idereg>,%a2
    2072:	47f9 0000 3c88 	lea 3c88 <idereg>,%a3
    2078:	598b           	subql #4,%a3
    207a:	b7ca           	cmpal %a2,%a3
    207c:	6506           	bcss 2084 <CALL_CTORS+0x1c>
    207e:	2853           	moveal %a3@,%a4
    2080:	4e94           	jsr %a4@
    2082:	60f4           	bras 2078 <CALL_CTORS+0x10>
    2084:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    2088:	4e75           	rts

0000208a <CALL_DTORS>:
    208a:	48e7 0038      	moveml %a2-%a4,%sp@-
    208e:	45f9 0000 3c88 	lea 3c88 <idereg>,%a2
    2094:	47f9 0000 3c88 	lea 3c88 <idereg>,%a3
    209a:	b5cb           	cmpal %a3,%a2
    209c:	6708           	beqs 20a6 <CALL_DTORS+0x1c>
    209e:	2852           	moveal %a2@,%a4
    20a0:	4e94           	jsr %a4@
    20a2:	588a           	addql #4,%a2
    20a4:	60f4           	bras 209a <CALL_DTORS+0x10>
    20a6:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20aa:	4e75           	rts

Disassembly of section .text:

000020ac <string_error>:
// 	vector[27] = autovector_ipl_3_handler;
// 	mcEnableInterrupts(intr_mask);
// }

char *string_error(uint8_t err_reg)
{
    20ac:	48e7 3838      	moveml %d2-%d4/%a2-%a4,%sp@-
    20b0:	262f 001c      	movel %sp@(28),%d3
	static char buffer[64];
	int i;

	sprintf(buffer, "[ ");
    20b4:	4879 0000 372a 	pea 372a <__umodsi3+0x2e>
    20ba:	4879 0000 3ce1 	pea 3ce1 <buffer.4>
    20c0:	45f9 0000 352e 	lea 352e <sprintf_>,%a2
    20c6:	4e92           	jsr %a2@
	for (i = 7; i >= 0; i--)
		sprintf(buffer + strlen(buffer), "%s ", str_error_reg[i][err_reg >> i & 0x01]);
    20c8:	0283 0000 00ff 	andil #255,%d3
    20ce:	508f           	addql #8,%sp
	for (i = 7; i >= 0; i--)
    20d0:	7407           	moveq #7,%d2
    20d2:	49f9 0000 3bf8 	lea 3bf8 <str_error_reg>,%a4
    20d8:	47f9 0000 35b8 	lea 35b8 <strlen>,%a3
		sprintf(buffer + strlen(buffer), "%s ", str_error_reg[i][err_reg >> i & 0x01]);
    20de:	2003           	movel %d3,%d0
    20e0:	e4a0           	asrl %d2,%d0
    20e2:	7201           	moveq #1,%d1
    20e4:	c081           	andl %d1,%d0
    20e6:	2202           	movel %d2,%d1
    20e8:	d282           	addl %d2,%d1
    20ea:	d081           	addl %d1,%d0
    20ec:	d080           	addl %d0,%d0
    20ee:	d080           	addl %d0,%d0
    20f0:	2834 0800      	movel %a4@(0,%d0:l),%d4
    20f4:	4879 0000 3ce1 	pea 3ce1 <buffer.4>
    20fa:	4e93           	jsr %a3@
    20fc:	2f04           	movel %d4,%sp@-
    20fe:	4879 0000 372d 	pea 372d <__umodsi3+0x31>
    2104:	0680 0000 3ce1 	addil #15585,%d0
    210a:	2f00           	movel %d0,%sp@-
    210c:	4e92           	jsr %a2@
	for (i = 7; i >= 0; i--)
    210e:	4fef 0010      	lea %sp@(16),%sp
    2112:	51ca ffca      	dbf %d2,20de <string_error+0x32>
    2116:	4242           	clrw %d2
    2118:	5382           	subql #1,%d2
    211a:	64c2           	bccs 20de <string_error+0x32>
	sprintf(buffer + strlen(buffer), "]");
    211c:	4879 0000 3ce1 	pea 3ce1 <buffer.4>
    2122:	4e93           	jsr %a3@
    2124:	4879 0000 3731 	pea 3731 <__umodsi3+0x35>
    212a:	0680 0000 3ce1 	addil #15585,%d0
    2130:	2f00           	movel %d0,%sp@-
    2132:	4e92           	jsr %a2@

	return (char *)buffer;
    2134:	4fef 000c      	lea %sp@(12),%sp
}
    2138:	203c 0000 3ce1 	movel #15585,%d0
    213e:	4cdf 1c1c      	moveml %sp@+,%d2-%d4/%a2-%a4
    2142:	4e75           	rts

00002144 <string_status>:

char *
string_status(uint8_t stat_reg)
{
    2144:	48e7 3838      	moveml %d2-%d4/%a2-%a4,%sp@-
    2148:	262f 001c      	movel %sp@(28),%d3
	static char buffer[64];
	int i;

	sprintf(buffer, "[ ");
    214c:	4879 0000 372a 	pea 372a <__umodsi3+0x2e>
    2152:	4879 0000 3ca1 	pea 3ca1 <buffer.3>
    2158:	45f9 0000 352e 	lea 352e <sprintf_>,%a2
    215e:	4e92           	jsr %a2@
	for (i = 7; i >= 0; i--)
		sprintf(buffer + strlen(buffer), "%s ", str_status_reg[i][stat_reg >> i & 0x01]);
    2160:	0283 0000 00ff 	andil #255,%d3
    2166:	508f           	addql #8,%sp
	for (i = 7; i >= 0; i--)
    2168:	7407           	moveq #7,%d2
    216a:	49f9 0000 3c38 	lea 3c38 <str_status_reg>,%a4
    2170:	47f9 0000 35b8 	lea 35b8 <strlen>,%a3
		sprintf(buffer + strlen(buffer), "%s ", str_status_reg[i][stat_reg >> i & 0x01]);
    2176:	2003           	movel %d3,%d0
    2178:	e4a0           	asrl %d2,%d0
    217a:	7201           	moveq #1,%d1
    217c:	c081           	andl %d1,%d0
    217e:	2202           	movel %d2,%d1
    2180:	d282           	addl %d2,%d1
    2182:	d081           	addl %d1,%d0
    2184:	d080           	addl %d0,%d0
    2186:	d080           	addl %d0,%d0
    2188:	2834 0800      	movel %a4@(0,%d0:l),%d4
    218c:	4879 0000 3ca1 	pea 3ca1 <buffer.3>
    2192:	4e93           	jsr %a3@
    2194:	2f04           	movel %d4,%sp@-
    2196:	4879 0000 372d 	pea 372d <__umodsi3+0x31>
    219c:	0680 0000 3ca1 	addil #15521,%d0
    21a2:	2f00           	movel %d0,%sp@-
    21a4:	4e92           	jsr %a2@
	for (i = 7; i >= 0; i--)
    21a6:	4fef 0010      	lea %sp@(16),%sp
    21aa:	51ca ffca      	dbf %d2,2176 <string_status+0x32>
    21ae:	4242           	clrw %d2
    21b0:	5382           	subql #1,%d2
    21b2:	64c2           	bccs 2176 <string_status+0x32>
	sprintf(buffer + strlen(buffer), "]");
    21b4:	4879 0000 3ca1 	pea 3ca1 <buffer.3>
    21ba:	4e93           	jsr %a3@
    21bc:	4879 0000 3731 	pea 3731 <__umodsi3+0x35>
    21c2:	0680 0000 3ca1 	addil #15521,%d0
    21c8:	2f00           	movel %d0,%sp@-
    21ca:	4e92           	jsr %a2@

	return buffer;
    21cc:	4fef 000c      	lea %sp@(12),%sp
}
    21d0:	203c 0000 3ca1 	movel #15521,%d0
    21d6:	4cdf 1c1c      	moveml %sp@+,%d2-%d4/%a2-%a4
    21da:	4e75           	rts

000021dc <print_id_parameters>:
	idereg[IDE_REG_RD_LBA_7_0] = (uint8_t)(lba);
}

void
print_id_parameters(volatile uint16_t *id_block)
{
    21dc:	2f0b           	movel %a3,%sp@-
    21de:	2f0a           	movel %a2,%sp@-
    21e0:	246f 000c      	moveal %sp@(12),%a2

	printf("[0] %s %s %s\r\n", (id_block[0] & 0x8000) ? "ATAPI" : "ATA", (id_block[0] & 0x0080) ? "Removable media device" : "", (id_block[0] & 0x0040) ? "Not Removable controller and/or device" : "");
    21e4:	3012           	movew %a2@,%d0
    21e6:	0800 0006      	btst #6,%d0
    21ea:	6700 025c      	beqw 2448 <print_id_parameters+0x26c>
    21ee:	41f9 0000 3733 	lea 3733 <__umodsi3+0x37>,%a0
    21f4:	3012           	movew %a2@,%d0
    21f6:	4a00           	tstb %d0
    21f8:	6a00 0238      	bplw 2432 <print_id_parameters+0x256>
    21fc:	223c 0000 375a 	movel #14170,%d1
    2202:	3012           	movew %a2@,%d0
    2204:	6b00 0238      	bmiw 243e <print_id_parameters+0x262>
    2208:	203c 0000 3777 	movel #14199,%d0
    220e:	2f08           	movel %a0,%sp@-
    2210:	2f01           	movel %d1,%sp@-
    2212:	2f00           	movel %d0,%sp@-
    2214:	4879 0000 3786 	pea 3786 <__umodsi3+0x8a>
    221a:	47f9 0000 3506 	lea 3506 <printf_>,%a3
    2220:	4e93           	jsr %a3@
	printf("[1] Logical cylinders = %u\r\n", id_block[1]);
    2222:	302a 0002      	movew %a2@(2),%d0
    2226:	3f00           	movew %d0,%sp@-
    2228:	4267           	clrw %sp@-
    222a:	4879 0000 3795 	pea 3795 <__umodsi3+0x99>
    2230:	4e93           	jsr %a3@
	printf("[3] Logical heads = %u\r\n", id_block[3]);
    2232:	302a 0006      	movew %a2@(6),%d0
    2236:	3f00           	movew %d0,%sp@-
    2238:	4267           	clrw %sp@-
    223a:	4879 0000 37b2 	pea 37b2 <__umodsi3+0xb6>
    2240:	4e93           	jsr %a3@
	printf("[6] Logical sectors per logical track = %u\r\n", id_block[6]);
    2242:	302a 000c      	movew %a2@(12),%d0
    2246:	4fef 0020      	lea %sp@(32),%sp
    224a:	3f00           	movew %d0,%sp@-
    224c:	4267           	clrw %sp@-
    224e:	4879 0000 37cb 	pea 37cb <__umodsi3+0xcf>
    2254:	4e93           	jsr %a3@
	printf("[10-19] Serial number = \"%.20s\"\r\n", (char *)&id_block[10]);
    2256:	486a 0014      	pea %a2@(20)
    225a:	4879 0000 37f8 	pea 37f8 <__umodsi3+0xfc>
    2260:	4e93           	jsr %a3@
	printf("[22] Vendor-specic bytes available on READ/WRITE LONG commands = %u\r\n", id_block[22]);
    2262:	302a 002c      	movew %a2@(44),%d0
    2266:	3f00           	movew %d0,%sp@-
    2268:	4267           	clrw %sp@-
    226a:	4879 0000 381a 	pea 381a <__umodsi3+0x11e>
    2270:	4e93           	jsr %a3@
	printf("[23-26] Firmware revision = \"%.8s\"\r\n", (char *)&id_block[23]);
    2272:	486a 002e      	pea %a2@(46)
    2276:	4879 0000 3860 	pea 3860 <__umodsi3+0x164>
    227c:	4e93           	jsr %a3@
	printf("[27-46] Model number = \"%.40s\"\r\n", (char *)&id_block[27]);
    227e:	4fef 0020      	lea %sp@(32),%sp
    2282:	486a 0036      	pea %a2@(54)
    2286:	4879 0000 3885 	pea 3885 <__umodsi3+0x189>
    228c:	4e93           	jsr %a3@
	printf("[47] Max number of sectors that can be transferred per interrupt on READ/WRITE MULTIPLE = %u\r\n", id_block[47] & 0xFF);
    228e:	302a 005e      	movew %a2@(94),%d0
    2292:	7200           	moveq #0,%d1
    2294:	4601           	notb %d1
    2296:	c280           	andl %d0,%d1
    2298:	2f01           	movel %d1,%sp@-
    229a:	4879 0000 38a6 	pea 38a6 <__umodsi3+0x1aa>
    22a0:	4e93           	jsr %a3@
	printf("[53] The fields in [54-58] %s valid\r\n", (id_block[53] & 0x0001) ? "are" : "may be");
    22a2:	302a 006a      	movew %a2@(106),%d0
    22a6:	4fef 0010      	lea %sp@(16),%sp
    22aa:	0800 0000      	btst #0,%d0
    22ae:	6700 00c2      	beqw 2372 <print_id_parameters+0x196>
    22b2:	203c 0000 377b 	movel #14203,%d0
    22b8:	2f00           	movel %d0,%sp@-
    22ba:	4879 0000 3905 	pea 3905 <__umodsi3+0x209>
    22c0:	4e93           	jsr %a3@
	printf("[54] Number of current logical cylinders = %u\r\n", id_block[54]);
    22c2:	302a 006c      	movew %a2@(108),%d0
    22c6:	3f00           	movew %d0,%sp@-
    22c8:	4267           	clrw %sp@-
    22ca:	4879 0000 392b 	pea 392b <__umodsi3+0x22f>
    22d0:	4e93           	jsr %a3@
	printf("[55] Number of current logical heads = %u\r\n", id_block[55]);
    22d2:	302a 006e      	movew %a2@(110),%d0
    22d6:	3f00           	movew %d0,%sp@-
    22d8:	4267           	clrw %sp@-
    22da:	4879 0000 395b 	pea 395b <__umodsi3+0x25f>
    22e0:	4e93           	jsr %a3@
	printf("[56] Number of current logical sectors per track = %u\r\n", id_block[56]);
    22e2:	302a 0070      	movew %a2@(112),%d0
    22e6:	3f00           	movew %d0,%sp@-
    22e8:	4267           	clrw %sp@-
    22ea:	4879 0000 3987 	pea 3987 <__umodsi3+0x28b>
    22f0:	4e93           	jsr %a3@
	printf("[57-58] Current capacity in sectors = %lu\r\n", (uint32_t)id_block[58]*65536 + (uint32_t)id_block[57]);
    22f2:	322a 0074      	movew %a2@(116),%d1
    22f6:	302a 0072      	movew %a2@(114),%d0
    22fa:	4fef 0020      	lea %sp@(32),%sp
    22fe:	4841           	swap %d1
    2300:	4241           	clrw %d1
    2302:	0280 0000 ffff 	andil #65535,%d0
    2308:	2041           	moveal %d1,%a0
    230a:	4870 0800      	pea %a0@(0,%d0:l)
    230e:	4879 0000 39bf 	pea 39bf <__umodsi3+0x2c3>
    2314:	4e93           	jsr %a3@
	printf("[60-61] Total number of LBA addressable sectors = %lu\r\n", (uint32_t)id_block[61]*65536 + (uint32_t)id_block[60]);
    2316:	322a 007a      	movew %a2@(122),%d1
    231a:	302a 0078      	movew %a2@(120),%d0
    231e:	4841           	swap %d1
    2320:	4241           	clrw %d1
    2322:	0280 0000 ffff 	andil #65535,%d0
    2328:	2041           	moveal %d1,%a0
    232a:	4870 0800      	pea %a0@(0,%d0:l)
    232e:	4879 0000 39eb 	pea 39eb <__umodsi3+0x2ef>
    2334:	4e93           	jsr %a3@
	printf("[80] Major version number = %04X\r\n", id_block[80]);
    2336:	302a 00a0      	movew %a2@(160),%d0
    233a:	3f00           	movew %d0,%sp@-
    233c:	4267           	clrw %sp@-
    233e:	4879 0000 3a23 	pea 3a23 <__umodsi3+0x327>
    2344:	4e93           	jsr %a3@
	printf("[81] Minor version number = %04X\r\n", id_block[81]);
    2346:	302a 00a2      	movew %a2@(162),%d0
    234a:	3f00           	movew %d0,%sp@-
    234c:	4267           	clrw %sp@-
    234e:	4879 0000 3a46 	pea 3a46 <__umodsi3+0x34a>
    2354:	4e93           	jsr %a3@
	printf("[128] Security Status = %04X\r\n", id_block[128]);
    2356:	302a 0100      	movew %a2@(256),%d0
    235a:	4fef 0020      	lea %sp@(32),%sp
    235e:	3f00           	movew %d0,%sp@-
    2360:	4267           	clrw %sp@-
    2362:	4879 0000 3a69 	pea 3a69 <__umodsi3+0x36d>
    2368:	4e93           	jsr %a3@
}
    236a:	508f           	addql #8,%sp
    236c:	245f           	moveal %sp@+,%a2
    236e:	265f           	moveal %sp@+,%a3
    2370:	4e75           	rts
	printf("[53] The fields in [54-58] %s valid\r\n", (id_block[53] & 0x0001) ? "are" : "may be");
    2372:	203c 0000 377f 	movel #14207,%d0
    2378:	2f00           	movel %d0,%sp@-
    237a:	4879 0000 3905 	pea 3905 <__umodsi3+0x209>
    2380:	4e93           	jsr %a3@
	printf("[54] Number of current logical cylinders = %u\r\n", id_block[54]);
    2382:	302a 006c      	movew %a2@(108),%d0
    2386:	3f00           	movew %d0,%sp@-
    2388:	4267           	clrw %sp@-
    238a:	4879 0000 392b 	pea 392b <__umodsi3+0x22f>
    2390:	4e93           	jsr %a3@
	printf("[55] Number of current logical heads = %u\r\n", id_block[55]);
    2392:	302a 006e      	movew %a2@(110),%d0
    2396:	3f00           	movew %d0,%sp@-
    2398:	4267           	clrw %sp@-
    239a:	4879 0000 395b 	pea 395b <__umodsi3+0x25f>
    23a0:	4e93           	jsr %a3@
	printf("[56] Number of current logical sectors per track = %u\r\n", id_block[56]);
    23a2:	302a 0070      	movew %a2@(112),%d0
    23a6:	3f00           	movew %d0,%sp@-
    23a8:	4267           	clrw %sp@-
    23aa:	4879 0000 3987 	pea 3987 <__umodsi3+0x28b>
    23b0:	4e93           	jsr %a3@
	printf("[57-58] Current capacity in sectors = %lu\r\n", (uint32_t)id_block[58]*65536 + (uint32_t)id_block[57]);
    23b2:	322a 0074      	movew %a2@(116),%d1
    23b6:	302a 0072      	movew %a2@(114),%d0
    23ba:	4fef 0020      	lea %sp@(32),%sp
    23be:	4841           	swap %d1
    23c0:	4241           	clrw %d1
    23c2:	0280 0000 ffff 	andil #65535,%d0
    23c8:	2041           	moveal %d1,%a0
    23ca:	4870 0800      	pea %a0@(0,%d0:l)
    23ce:	4879 0000 39bf 	pea 39bf <__umodsi3+0x2c3>
    23d4:	4e93           	jsr %a3@
	printf("[60-61] Total number of LBA addressable sectors = %lu\r\n", (uint32_t)id_block[61]*65536 + (uint32_t)id_block[60]);
    23d6:	322a 007a      	movew %a2@(122),%d1
    23da:	302a 0078      	movew %a2@(120),%d0
    23de:	4841           	swap %d1
    23e0:	4241           	clrw %d1
    23e2:	0280 0000 ffff 	andil #65535,%d0
    23e8:	2041           	moveal %d1,%a0
    23ea:	4870 0800      	pea %a0@(0,%d0:l)
    23ee:	4879 0000 39eb 	pea 39eb <__umodsi3+0x2ef>
    23f4:	4e93           	jsr %a3@
	printf("[80] Major version number = %04X\r\n", id_block[80]);
    23f6:	302a 00a0      	movew %a2@(160),%d0
    23fa:	3f00           	movew %d0,%sp@-
    23fc:	4267           	clrw %sp@-
    23fe:	4879 0000 3a23 	pea 3a23 <__umodsi3+0x327>
    2404:	4e93           	jsr %a3@
	printf("[81] Minor version number = %04X\r\n", id_block[81]);
    2406:	302a 00a2      	movew %a2@(162),%d0
    240a:	3f00           	movew %d0,%sp@-
    240c:	4267           	clrw %sp@-
    240e:	4879 0000 3a46 	pea 3a46 <__umodsi3+0x34a>
    2414:	4e93           	jsr %a3@
	printf("[128] Security Status = %04X\r\n", id_block[128]);
    2416:	302a 0100      	movew %a2@(256),%d0
    241a:	4fef 0020      	lea %sp@(32),%sp
    241e:	3f00           	movew %d0,%sp@-
    2420:	4267           	clrw %sp@-
    2422:	4879 0000 3a69 	pea 3a69 <__umodsi3+0x36d>
    2428:	4e93           	jsr %a3@
}
    242a:	508f           	addql #8,%sp
    242c:	245f           	moveal %sp@+,%a2
    242e:	265f           	moveal %sp@+,%a3
    2430:	4e75           	rts
	printf("[0] %s %s %s\r\n", (id_block[0] & 0x8000) ? "ATAPI" : "ATA", (id_block[0] & 0x0080) ? "Removable media device" : "", (id_block[0] & 0x0040) ? "Not Removable controller and/or device" : "");
    2432:	223c 0000 3819 	movel #14361,%d1
    2438:	3012           	movew %a2@,%d0
    243a:	6a00 fdcc      	bplw 2208 <print_id_parameters+0x2c>
    243e:	203c 0000 3771 	movel #14193,%d0
    2444:	6000 fdc8      	braw 220e <print_id_parameters+0x32>
    2448:	41f9 0000 3819 	lea 3819 <__umodsi3+0x11d>,%a0
    244e:	6000 fda4      	braw 21f4 <print_id_parameters+0x18>

00002452 <kmain>:

void
kmain(void)
{
    2452:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
	// printf("Disabling device interrupt\r\n");
	// idereg[IDE_REG_WR_DEVICE_CONTROL] = (1<<CONTROL_nIEN);

	// printf("Selecting the %d device\r\n", 0);

	printf("Enabling device interrupt\n");
    2456:	4879 0000 3a88 	pea 3a88 <__umodsi3+0x38c>
    245c:	4bf9 0000 3506 	lea 3506 <printf_>,%a5
    2462:	4e95           	jsr %a5@
	idereg[IDE_REG_WR_DEVICE_CONTROL] = 0;
    2464:	2079 0000 3c88 	moveal 3c88 <idereg>,%a0
    246a:	317c 0000 001c 	movew #0,%a0@(28)
	printf("Enabled\n");
    2470:	4879 0000 3aa3 	pea 3aa3 <__umodsi3+0x3a7>
    2476:	4e95           	jsr %a5@
	
	vsectors_read = 0;
    2478:	33fc 0000 0000 	movew #0,4528 <vsectors_read>
    247e:	4528 
	vsectors_written = 0;
    2480:	33fc 0000 0000 	movew #0,4526 <vsectors_written>
    2486:	4526 

	printf("About to memset\n");
    2488:	4879 0000 3aac 	pea 3aac <__umodsi3+0x3b0>
    248e:	4e95           	jsr %a5@
	memset(vbuffer.whole, 0, sizeof(vbuffer.whole));
    2490:	4878 0800      	pea 800 <EFP_CHECKINPUT+0x368>
    2494:	42a7           	clrl %sp@-
    2496:	4879 0000 3d22 	pea 3d22 <vbuffer>
    249c:	4eb9 0000 3598 	jsr 3598 <memset>
	printf("Done memset\n");
    24a2:	4879 0000 3abd 	pea 3abd <__umodsi3+0x3c1>
    24a8:	4e95           	jsr %a5@
	printf("Expect STATUS.ERR and ERROR.ABRT\r\n");
	idereg[IDE_REG_WR_COMMAND] = command = DEVICE_COMMAND_NOP;
#endif

#if 1
	printf("Sending the IDENTIFY DEVICE command\r\n");
    24aa:	4879 0000 3aca 	pea 3aca <__umodsi3+0x3ce>
    24b0:	4e95           	jsr %a5@
	sectors_to_read = 1;
    24b2:	33fc 0001 0000 	movew #1,4524 <sectors_to_read>
    24b8:	4524 
	idereg[IDE_REG_WR_COMMAND] = command = DEVICE_COMMAND_IDENTIFY_DEVICE;
    24ba:	13fc ffec 0000 	moveb #-20,452a <command>
    24c0:	452a 
    24c2:	2079 0000 3c88 	moveal 3c88 <idereg>,%a0
    24c8:	317c 00ec 000e 	movew #236,%a0@(14)
		while (!virq)
			continue;
		break;
	case DEVICE_COMMAND_IDENTIFY_DEVICE:
	case DEVICE_COMMAND_READ_SECTORS:
		printf("Waiting for %d sectors to be read\r\n", sectors_to_read);
    24ce:	4fef 0020      	lea %sp@(32),%sp
    24d2:	4878 0001      	pea 1 <ROSCO_M68K_SYSLIBS>
    24d6:	4879 0000 3af0 	pea 3af0 <__umodsi3+0x3f4>
    24dc:	4e95           	jsr %a5@
		while (vsectors_read != sectors_to_read)
    24de:	3039 0000 4524 	movew 4524 <sectors_to_read>,%d0
    24e4:	508f           	addql #8,%sp
    24e6:	3239 0000 4528 	movew 4528 <vsectors_read>,%d1
    24ec:	b041           	cmpw %d1,%d0
    24ee:	66f6           	bnes 24e6 <kmain+0x94>
		while (vsectors_written != sectors_to_write)
			continue;
		break;
	}

	printf("Status = %s\r\n", string_status(vstatus));
    24f0:	1039 0000 4523 	moveb 4523 <vstatus>,%d0
    24f6:	0280 0000 00ff 	andil #255,%d0
    24fc:	2f00           	movel %d0,%sp@-
    24fe:	4eb9 0000 2144 	jsr 2144 <string_status>
    2504:	2f00           	movel %d0,%sp@-
    2506:	4879 0000 3b14 	pea 3b14 <__umodsi3+0x418>
    250c:	4e95           	jsr %a5@
	if (vstatus & (1<<STATUS_ERR))
    250e:	1039 0000 4523 	moveb 4523 <vstatus>,%d0
    2514:	4fef 000c      	lea %sp@(12),%sp
    2518:	0800 0000      	btst #0,%d0
    251c:	661a           	bnes 2538 <kmain+0xe6>
		printf("Error =  %s\r\n", string_error(verror));

	if (command == DEVICE_COMMAND_IDENTIFY_DEVICE || command == DEVICE_COMMAND_READ_SECTORS) {
    251e:	1039 0000 452a 	moveb 452a <command>,%d0
    2524:	0c00 ffec      	cmpib #-20,%d0
    2528:	673c           	beqs 2566 <kmain+0x114>
    252a:	0c00 0020      	cmpib #32,%d0
    252e:	6700 010e      	beqw 263e <kmain+0x1ec>

	if (command == DEVICE_COMMAND_IDENTIFY_DEVICE)
		print_id_parameters(vbuffer.word[0]);


}
    2532:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2536:	4e75           	rts
		printf("Error =  %s\r\n", string_error(verror));
    2538:	1039 0000 4522 	moveb 4522 <verror>,%d0
    253e:	0280 0000 00ff 	andil #255,%d0
    2544:	2f00           	movel %d0,%sp@-
    2546:	4eb9 0000 20ac 	jsr 20ac <string_error>
    254c:	2f00           	movel %d0,%sp@-
    254e:	4879 0000 3b22 	pea 3b22 <__umodsi3+0x426>
    2554:	4e95           	jsr %a5@
    2556:	4fef 000c      	lea %sp@(12),%sp
	if (command == DEVICE_COMMAND_IDENTIFY_DEVICE || command == DEVICE_COMMAND_READ_SECTORS) {
    255a:	1039 0000 452a 	moveb 452a <command>,%d0
    2560:	0c00 ffec      	cmpib #-20,%d0
    2564:	66c4           	bnes 252a <kmain+0xd8>
		ascii[16] = '\0';
    2566:	4239 0000 3ca0 	clrb 3ca0 <ascii.0+0x10>
		for (int i = 0; i < vsectors_read; i++) {
    256c:	3039 0000 4528 	movew 4528 <vsectors_read>,%d0
    2572:	6700 00b6      	beqw 262a <kmain+0x1d8>
    2576:	7800           	moveq #0,%d4
    2578:	263c 0000 3c90 	movel #15504,%d3
    257e:	2e03           	movel %d3,%d7
    2580:	4487           	negl %d7
    2582:	243c 0000 0200 	movel #512,%d2
    2588:	9483           	subl %d3,%d2
    258a:	2c3c 0000 3d22 	movel #15650,%d6
			printf("Sector offset %d\r\n", i);
    2590:	2f04           	movel %d4,%sp@-
    2592:	4879 0000 3b30 	pea 3b30 <__umodsi3+0x434>
    2598:	4e95           	jsr %a5@
			for (int j = 0; j < 32; j++) {
    259a:	2847           	moveal %d7,%a4
    259c:	508f           	addql #8,%sp
			printf("Sector offset %d\r\n", i);
    259e:	7a00           	moveq #0,%d5
    25a0:	2004           	movel %d4,%d0
    25a2:	7209           	moveq #9,%d1
    25a4:	e3a8           	lsll %d1,%d0
					printf(" %02X", vbuffer.byte[i][j*16 + k]);
    25a6:	2646           	moveal %d6,%a3
    25a8:	d7c0           	addal %d0,%a3
				printf("%04X -", j*16);
    25aa:	2f05           	movel %d5,%sp@-
    25ac:	4879 0000 3b43 	pea 3b43 <__umodsi3+0x447>
    25b2:	4e95           	jsr %a5@
				for (int k = 0; k < 16; k++) {
    25b4:	508f           	addql #8,%sp
				printf("%04X -", j*16);
    25b6:	2443           	moveal %d3,%a2
					printf(" %02X", vbuffer.byte[i][j*16 + k]);
    25b8:	4df2 c800      	lea %a2@(0,%a4:l),%fp
    25bc:	1033 e800      	moveb %a3@(0,%fp:l),%d0
    25c0:	0280 0000 00ff 	andil #255,%d0
    25c6:	2f00           	movel %d0,%sp@-
    25c8:	4879 0000 3b4a 	pea 3b4a <__umodsi3+0x44e>
    25ce:	4e95           	jsr %a5@
					ascii[k] = vbuffer.byte[i][j*16 + k];
    25d0:	1033 e800      	moveb %a3@(0,%fp:l),%d0
					ascii[k] = (ascii[k] >= ' ' && ascii[k] <= '~') ? ascii[k] : '.';
    25d4:	1200           	moveb %d0,%d1
    25d6:	0601 ffe0      	addib #-32,%d1
    25da:	508f           	addql #8,%sp
    25dc:	0c01 005e      	cmpib #94,%d1
    25e0:	6302           	blss 25e4 <kmain+0x192>
    25e2:	702e           	moveq #46,%d0
    25e4:	14c0           	moveb %d0,%a2@+
				for (int k = 0; k < 16; k++) {
    25e6:	b5fc 0000 3ca0 	cmpal #15520,%a2
    25ec:	66ca           	bnes 25b8 <kmain+0x166>
				printf(" - %s\r\n", ascii);
    25ee:	4879 0000 3c90 	pea 3c90 <ascii.0>
    25f4:	4879 0000 3b50 	pea 3b50 <__umodsi3+0x454>
    25fa:	4e95           	jsr %a5@
			for (int j = 0; j < 32; j++) {
    25fc:	7010           	moveq #16,%d0
    25fe:	da80           	addl %d0,%d5
    2600:	49ec 0010      	lea %a4@(16),%a4
    2604:	508f           	addql #8,%sp
    2606:	b48c           	cmpl %a4,%d2
    2608:	66a0           	bnes 25aa <kmain+0x158>
		for (int i = 0; i < vsectors_read; i++) {
    260a:	5284           	addql #1,%d4
    260c:	3039 0000 4528 	movew 4528 <vsectors_read>,%d0
    2612:	0280 0000 ffff 	andil #65535,%d0
    2618:	b880           	cmpl %d0,%d4
    261a:	6d00 ff74      	bltw 2590 <kmain+0x13e>
	if (command == DEVICE_COMMAND_IDENTIFY_DEVICE)
    261e:	0c39 ffec 0000 	cmpib #-20,452a <command>
    2624:	452a 
    2626:	6600 ff0a      	bnew 2532 <kmain+0xe0>
		print_id_parameters(vbuffer.word[0]);
    262a:	4879 0000 3d22 	pea 3d22 <vbuffer>
    2630:	4eb9 0000 21dc 	jsr 21dc <print_id_parameters>
    2636:	588f           	addql #4,%sp
}
    2638:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    263c:	4e75           	rts
		ascii[16] = '\0';
    263e:	4239 0000 3ca0 	clrb 3ca0 <ascii.0+0x10>
		for (int i = 0; i < vsectors_read; i++) {
    2644:	3039 0000 4528 	movew 4528 <vsectors_read>,%d0
    264a:	6700 fee6      	beqw 2532 <kmain+0xe0>
    264e:	7800           	moveq #0,%d4
    2650:	263c 0000 3c90 	movel #15504,%d3
    2656:	2e03           	movel %d3,%d7
    2658:	4487           	negl %d7
    265a:	243c 0000 0200 	movel #512,%d2
    2660:	9483           	subl %d3,%d2
    2662:	2c3c 0000 3d22 	movel #15650,%d6
    2668:	6000 ff26      	braw 2590 <kmain+0x13e>

0000266c <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
    266c:	222f 0004      	movel %sp@(4),%d1
    2670:	202f 000c      	movel %sp@(12),%d0
  if (idx < maxlen) {
    2674:	b0af 0010      	cmpl %sp@(16),%d0
    2678:	6408           	bccs 2682 <_out_buffer+0x16>
    ((char*)buffer)[idx] = character;
    267a:	206f 0008      	moveal %sp@(8),%a0
    267e:	1181 0800      	moveb %d1,%a0@(0,%d0:l)
  }
}
    2682:	4e75           	rts

00002684 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    2684:	4e75           	rts

00002686 <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    2686:	4fef ffcc      	lea %sp@(-52),%sp
    268a:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    268e:	246f 0064      	moveal %sp@(100),%a2
    2692:	2a2f 0068      	movel %sp@(104),%d5
    2696:	2c2f 0070      	movel %sp@(112),%d6
    269a:	242f 0074      	movel %sp@(116),%d2
    269e:	262f 007c      	movel %sp@(124),%d3
    26a2:	2e2f 0084      	movel %sp@(132),%d7
    26a6:	1f6f 007b 003f 	moveb %sp@(123),%sp@(63)
  if (!value) {
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    26ac:	222f 0088      	movel %sp@(136),%d1
    26b0:	0281 0000 0400 	andil #1024,%d1
    26b6:	2f41 0032      	movel %d1,%sp@(50)
  if (!value) {
    26ba:	4a82           	tstl %d2
    26bc:	6700 0174      	beqw 2832 <_ntoa_long+0x1ac>
  if (flags & FLAGS_HASH) {
    26c0:	7210           	moveq #16,%d1
    26c2:	c2af 0088      	andl %sp@(136),%d1
    26c6:	2f41 0036      	movel %d1,%sp@(54)
    26ca:	082f 0005 008b 	btst #5,%sp@(139)
    26d0:	6600 017e      	bnew 2850 <_ntoa_long+0x1ca>
    26d4:	7061           	moveq #97,%d0
    26d6:	41ef 0040      	lea %sp@(64),%a0
    26da:	2f48 002e      	movel %a0,%sp@(46)
    26de:	4def 0060      	lea %sp@(96),%fp
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    26e2:	2808           	movel %a0,%d4
    26e4:	49f9 0000 36fc 	lea 36fc <__umodsi3>,%a4
    26ea:	47f9 0000 36a0 	lea 36a0 <__udivsi3>,%a3
    26f0:	1200           	moveb %d0,%d1
    26f2:	0601 fff6      	addib #-10,%d1
    26f6:	2f4a 003a      	movel %a2,%sp@(58)
    26fa:	2a45           	moveal %d5,%a5
    26fc:	1a01           	moveb %d1,%d5
      const char digit = (char)(value % base);
    26fe:	2f03           	movel %d3,%sp@-
    2700:	2f02           	movel %d2,%sp@-
    2702:	4e94           	jsr %a4@
    2704:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2706:	7209           	moveq #9,%d1
    2708:	b280           	cmpl %d0,%d1
    270a:	652a           	bcss 2736 <_ntoa_long+0xb0>
    270c:	0600 0030      	addib #48,%d0
    2710:	2444           	moveal %d4,%a2
    2712:	14c0           	moveb %d0,%a2@+
      value /= base;
    2714:	2f03           	movel %d3,%sp@-
    2716:	2f02           	movel %d2,%sp@-
    2718:	4e93           	jsr %a3@
    271a:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    271c:	b682           	cmpl %d2,%d3
    271e:	6228           	bhis 2748 <_ntoa_long+0xc2>
    2720:	bdca           	cmpal %a2,%fp
    2722:	6724           	beqs 2748 <_ntoa_long+0xc2>
    2724:	280a           	movel %a2,%d4
      value /= base;
    2726:	2400           	movel %d0,%d2
      const char digit = (char)(value % base);
    2728:	2f03           	movel %d3,%sp@-
    272a:	2f02           	movel %d2,%sp@-
    272c:	4e94           	jsr %a4@
    272e:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2730:	7209           	moveq #9,%d1
    2732:	b280           	cmpl %d0,%d1
    2734:	64d6           	bccs 270c <_ntoa_long+0x86>
    2736:	d005           	addb %d5,%d0
    2738:	2444           	moveal %d4,%a2
    273a:	14c0           	moveb %d0,%a2@+
      value /= base;
    273c:	2f03           	movel %d3,%sp@-
    273e:	2f02           	movel %d2,%sp@-
    2740:	4e93           	jsr %a3@
    2742:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    2744:	b682           	cmpl %d2,%d3
    2746:	63d8           	blss 2720 <_ntoa_long+0x9a>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2748:	246f 003a      	moveal %sp@(58),%a2
    274c:	2a0d           	movel %a5,%d5
    274e:	307c 0001      	moveaw #1,%a0
    2752:	91ef 002e      	subal %sp@(46),%a0
    2756:	d888           	addl %a0,%d4
  if (!(flags & FLAGS_LEFT)) {
    2758:	082f 0001 008b 	btst #1,%sp@(139)
    275e:	6700 013e      	beqw 289e <_ntoa_long+0x218>
    2762:	3c7c 0002      	moveaw #2,%fp
  if (flags & FLAGS_HASH) {
    2766:	4aaf 0036      	tstl %sp@(54)
    276a:	6700 023c      	beqw 29a8 <_ntoa_long+0x322>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    276e:	4aaf 0032      	tstl %sp@(50)
    2772:	6600 01aa      	bnew 291e <_ntoa_long+0x298>
    2776:	4a84           	tstl %d4
    2778:	6600 0324      	bnew 2a9e <_ntoa_long+0x418>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    277c:	7010           	moveq #16,%d0
    277e:	b083           	cmpl %d3,%d0
    2780:	6700 0412      	beqw 2b94 <_ntoa_long+0x50e>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2784:	5583           	subql #2,%d3
    2786:	6700 04b0      	beqw 2c38 <_ntoa_long+0x5b2>
      buf[len++] = '0';
    278a:	1f7c 0030 0040 	moveb #48,%sp@(64)
    2790:	202f 0088      	movel %sp@(136),%d0
    2794:	7401           	moveq #1,%d2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2796:	7203           	moveq #3,%d1
    2798:	c280           	andl %d0,%d1
      buf[len++] = '-';
    279a:	2802           	movel %d2,%d4
    if (negative) {
    279c:	4a2f 003f      	tstb %sp@(63)
    27a0:	6700 02dc      	beqw 2a7e <_ntoa_long+0x3f8>
      buf[len++] = '-';
    27a4:	5284           	addql #1,%d4
    27a6:	1fbc 002d 2840 	moveb #45,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    27ac:	4a81           	tstl %d1
    27ae:	6600 0194      	bnew 2944 <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    27b2:	b887           	cmpl %d7,%d4
    27b4:	6400 018e      	bccw 2944 <_ntoa_long+0x2be>
    27b8:	242f 006c      	movel %sp@(108),%d2
    27bc:	2604           	movel %d4,%d3
    27be:	9682           	subl %d2,%d3
      out(' ', buffer, idx++, maxlen);
    27c0:	2002           	movel %d2,%d0
    27c2:	5282           	addql #1,%d2
    27c4:	2f06           	movel %d6,%sp@-
    27c6:	2f00           	movel %d0,%sp@-
    27c8:	2f05           	movel %d5,%sp@-
    27ca:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    27ce:	4e92           	jsr %a2@
    for (size_t i = len; i < width; i++) {
    27d0:	2003           	movel %d3,%d0
    27d2:	d082           	addl %d2,%d0
    27d4:	4fef 0010      	lea %sp@(16),%sp
    27d8:	be80           	cmpl %d0,%d7
    27da:	62e4           	bhis 27c0 <_ntoa_long+0x13a>
    27dc:	2004           	movel %d4,%d0
    27de:	5280           	addql #1,%d0
    27e0:	be80           	cmpl %d0,%d7
    27e2:	6500 033e      	bcsw 2b22 <_ntoa_long+0x49c>
    27e6:	2047           	moveal %d7,%a0
    27e8:	5388           	subql #1,%a0
    27ea:	91c4           	subal %d4,%a0
    27ec:	226f 006c      	moveal %sp@(108),%a1
    27f0:	43f1 8801      	lea %a1@(1,%a0:l),%a1
    27f4:	2609           	movel %a1,%d3
  while (len) {
    27f6:	4a84           	tstl %d4
    27f8:	6600 014e      	bnew 2948 <_ntoa_long+0x2c2>
    27fc:	2403           	movel %d3,%d2
  if (flags & FLAGS_LEFT) {
    27fe:	bcfc 0000      	cmpaw #0,%fp
    2802:	6722           	beqs 2826 <_ntoa_long+0x1a0>
    while (idx - start_idx < width) {
    2804:	2602           	movel %d2,%d3
    2806:	96af 006c      	subl %sp@(108),%d3
    280a:	be83           	cmpl %d3,%d7
    280c:	6318           	blss 2826 <_ntoa_long+0x1a0>
      out(' ', buffer, idx++, maxlen);
    280e:	2f06           	movel %d6,%sp@-
    2810:	2f02           	movel %d2,%sp@-
    2812:	5282           	addql #1,%d2
    2814:	2f05           	movel %d5,%sp@-
    2816:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    281a:	4e92           	jsr %a2@
    while (idx - start_idx < width) {
    281c:	5283           	addql #1,%d3
    281e:	4fef 0010      	lea %sp@(16),%sp
    2822:	be83           	cmpl %d3,%d7
    2824:	62e8           	bhis 280e <_ntoa_long+0x188>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
}
    2826:	2002           	movel %d2,%d0
    2828:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    282c:	4fef 0034      	lea %sp@(52),%sp
    2830:	4e75           	rts
    flags &= ~FLAGS_HASH;
    2832:	70ef           	moveq #-17,%d0
    2834:	c0af 0088      	andl %sp@(136),%d0
  if (!(flags & FLAGS_PRECISION) || value) {
    2838:	4aaf 0032      	tstl %sp@(50)
    283c:	6640           	bnes 287e <_ntoa_long+0x1f8>
    283e:	42af 0036      	clrl %sp@(54)
    flags &= ~FLAGS_HASH;
    2842:	2f40 0088      	movel %d0,%sp@(136)
    2846:	082f 0005 008b 	btst #5,%sp@(139)
    284c:	6700 fe86      	beqw 26d4 <_ntoa_long+0x4e>
    2850:	7041           	moveq #65,%d0
    2852:	41ef 0040      	lea %sp@(64),%a0
    2856:	2f48 002e      	movel %a0,%sp@(46)
    285a:	4def 0060      	lea %sp@(96),%fp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    285e:	2808           	movel %a0,%d4
    2860:	49f9 0000 36fc 	lea 36fc <__umodsi3>,%a4
    2866:	47f9 0000 36a0 	lea 36a0 <__udivsi3>,%a3
    286c:	1200           	moveb %d0,%d1
    286e:	0601 fff6      	addib #-10,%d1
    2872:	2f4a 003a      	movel %a2,%sp@(58)
    2876:	2a45           	moveal %d5,%a5
    2878:	1a01           	moveb %d1,%d5
    287a:	6000 fe82      	braw 26fe <_ntoa_long+0x78>
  if (!(flags & FLAGS_LEFT)) {
    287e:	7802           	moveq #2,%d4
    2880:	c8af 0088      	andl %sp@(136),%d4
    2884:	082f 0001 008b 	btst #1,%sp@(139)
    288a:	6600 01e0      	bnew 2a6c <_ntoa_long+0x3e6>
    288e:	42af 0036      	clrl %sp@(54)
    flags &= ~FLAGS_HASH;
    2892:	2f40 0088      	movel %d0,%sp@(136)
  if (!(flags & FLAGS_PRECISION) || value) {
    2896:	2f7c 0000 0400 	movel #1024,%sp@(50)
    289c:	0032 
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    289e:	4a87           	tstl %d7
    28a0:	6700 012e      	beqw 29d0 <_ntoa_long+0x34a>
    28a4:	7001           	moveq #1,%d0
    28a6:	c0af 0088      	andl %sp@(136),%d0
    28aa:	2c40           	moveal %d0,%fp
    28ac:	082f 0000 008b 	btst #0,%sp@(139)
    28b2:	6700 0194      	beqw 2a48 <_ntoa_long+0x3c2>
    28b6:	4a2f 003f      	tstb %sp@(63)
    28ba:	6600 0250      	bnew 2b0c <_ntoa_long+0x486>
    28be:	700c           	moveq #12,%d0
    28c0:	c0af 0088      	andl %sp@(136),%d0
    28c4:	6600 0246      	bnew 2b0c <_ntoa_long+0x486>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    28c8:	b8af 0080      	cmpl %sp@(128),%d4
    28cc:	6400 013a      	bccw 2a08 <_ntoa_long+0x382>
    28d0:	7020           	moveq #32,%d0
    28d2:	b084           	cmpl %d4,%d0
    28d4:	6700 030a      	beqw 2be0 <_ntoa_long+0x55a>
    28d8:	41f7 4840      	lea %sp@(40,%d4:l),%a0
    28dc:	202f 0080      	movel %sp@(128),%d0
      buf[len++] = '0';
    28e0:	5284           	addql #1,%d4
    28e2:	10fc 0030      	moveb #48,%a0@+
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    28e6:	b880           	cmpl %d0,%d4
    28e8:	6400 0116      	bccw 2a00 <_ntoa_long+0x37a>
    28ec:	7220           	moveq #32,%d1
    28ee:	b284           	cmpl %d4,%d1
    28f0:	66ee           	bnes 28e0 <_ntoa_long+0x25a>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    28f2:	bcfc 0000      	cmpaw #0,%fp
    28f6:	6700 0140      	beqw 2a38 <_ntoa_long+0x3b2>
    28fa:	7020           	moveq #32,%d0
    28fc:	b087           	cmpl %d7,%d0
    28fe:	6400 0138      	bccw 2a38 <_ntoa_long+0x3b2>
  if (flags & FLAGS_HASH) {
    2902:	4aaf 0036      	tstl %sp@(54)
    2906:	6700 020a      	beqw 2b12 <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    290a:	4aaf 0032      	tstl %sp@(50)
    290e:	6600 0390      	bnew 2ca0 <_ntoa_long+0x61a>
    2912:	7020           	moveq #32,%d0
    2914:	9dce           	subal %fp,%fp
    2916:	b0af 0080      	cmpl %sp@(128),%d0
    291a:	6700 02e8      	beqw 2c04 <_ntoa_long+0x57e>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    291e:	7003           	moveq #3,%d0
    2920:	c0af 0088      	andl %sp@(136),%d0
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2924:	7210           	moveq #16,%d1
    2926:	b283           	cmpl %d3,%d1
    2928:	6700 0220      	beqw 2b4a <_ntoa_long+0x4c4>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    292c:	5583           	subql #2,%d3
    292e:	6700 01bc      	beqw 2aec <_ntoa_long+0x466>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2932:	7220           	moveq #32,%d1
    2934:	b284           	cmpl %d4,%d1
    2936:	6666           	bnes 299e <_ntoa_long+0x318>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2938:	4a80           	tstl %d0
    293a:	6608           	bnes 2944 <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    293c:	7220           	moveq #32,%d1
    293e:	b287           	cmpl %d7,%d1
    2940:	6500 fe76      	bcsw 27b8 <_ntoa_long+0x132>
  if (flags & FLAGS_HASH) {
    2944:	262f 006c      	movel %sp@(108),%d3
    2948:	4bef 0040      	lea %sp@(64),%a5
    294c:	47f5 4800      	lea %a5@(0,%d4:l),%a3
    2950:	d684           	addl %d4,%d3
    2952:	49f5 3800      	lea %a5@(0,%d3:l),%a4
    2956:	2403           	movel %d3,%d2
    out(buf[--len], buffer, idx++, maxlen);
    2958:	2f06           	movel %d6,%sp@-
    295a:	200c           	movel %a4,%d0
    295c:	908b           	subl %a3,%d0
    295e:	2f00           	movel %d0,%sp@-
    2960:	2f05           	movel %d5,%sp@-
    2962:	1023           	moveb %a3@-,%d0
    2964:	4880           	extw %d0
    2966:	3040           	moveaw %d0,%a0
    2968:	2f08           	movel %a0,%sp@-
    296a:	4e92           	jsr %a2@
  while (len) {
    296c:	4fef 0010      	lea %sp@(16),%sp
    2970:	b7cd           	cmpal %a5,%a3
    2972:	6700 fe8a      	beqw 27fe <_ntoa_long+0x178>
    2976:	2403           	movel %d3,%d2
    out(buf[--len], buffer, idx++, maxlen);
    2978:	2f06           	movel %d6,%sp@-
    297a:	200c           	movel %a4,%d0
    297c:	908b           	subl %a3,%d0
    297e:	2f00           	movel %d0,%sp@-
    2980:	2f05           	movel %d5,%sp@-
    2982:	1023           	moveb %a3@-,%d0
    2984:	4880           	extw %d0
    2986:	3040           	moveaw %d0,%a0
    2988:	2f08           	movel %a0,%sp@-
    298a:	4e92           	jsr %a2@
  while (len) {
    298c:	4fef 0010      	lea %sp@(16),%sp
    2990:	b7cd           	cmpal %a5,%a3
    2992:	66c2           	bnes 2956 <_ntoa_long+0x2d0>
    2994:	6000 fe68      	braw 27fe <_ntoa_long+0x178>
      buf[len++] = 'X';
    2998:	5384           	subql #1,%d4
    299a:	10bc 0058      	moveb #88,%a0@
      buf[len++] = '0';
    299e:	2004           	movel %d4,%d0
    29a0:	5284           	addql #1,%d4
    29a2:	1fbc 0030 0840 	moveb #48,%sp@(40,%d0:l)
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    29a8:	7020           	moveq #32,%d0
    29aa:	b084           	cmpl %d4,%d0
    29ac:	6600 0134      	bnew 2ae2 <_ntoa_long+0x45c>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    29b0:	7003           	moveq #3,%d0
    29b2:	c0af 0088      	andl %sp@(136),%d0
    29b6:	6700 00a8      	beqw 2a60 <_ntoa_long+0x3da>
  if (flags & FLAGS_HASH) {
    29ba:	262f 006c      	movel %sp@(108),%d3
    29be:	7820           	moveq #32,%d4
    29c0:	4bef 0040      	lea %sp@(64),%a5
    29c4:	47f5 4800      	lea %a5@(0,%d4:l),%a3
    29c8:	d684           	addl %d4,%d3
    29ca:	49f5 3800      	lea %a5@(0,%d3:l),%a4
    29ce:	6086           	bras 2956 <_ntoa_long+0x2d0>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    29d0:	b8af 0080      	cmpl %sp@(128),%d4
    29d4:	6400 0280      	bccw 2c56 <_ntoa_long+0x5d0>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    29d8:	7201           	moveq #1,%d1
    29da:	c2af 0088      	andl %sp@(136),%d1
    29de:	2c41           	moveal %d1,%fp
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    29e0:	7020           	moveq #32,%d0
    29e2:	b084           	cmpl %d4,%d0
    29e4:	6600 fef2      	bnew 28d8 <_ntoa_long+0x252>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    29e8:	4a81           	tstl %d1
    29ea:	6700 02ba      	beqw 2ca6 <_ntoa_long+0x620>
  if (flags & FLAGS_HASH) {
    29ee:	4aaf 0036      	tstl %sp@(54)
    29f2:	6600 02ba      	bnew 2cae <_ntoa_long+0x628>
    29f6:	9dce           	subal %fp,%fp
    29f8:	262f 006c      	movel %sp@(108),%d3
    29fc:	7820           	moveq #32,%d4
    29fe:	60c0           	bras 29c0 <_ntoa_long+0x33a>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2a00:	bcfc 0000      	cmpaw #0,%fp
    2a04:	6700 fd60      	beqw 2766 <_ntoa_long+0xe0>
    2a08:	be84           	cmpl %d4,%d7
    2a0a:	6300 024a      	blsw 2c56 <_ntoa_long+0x5d0>
    2a0e:	7220           	moveq #32,%d1
    2a10:	b284           	cmpl %d4,%d1
    2a12:	6700 0270      	beqw 2c84 <_ntoa_long+0x5fe>
    2a16:	43ef 0040      	lea %sp@(64),%a1
    2a1a:	41f1 4800      	lea %a1@(0,%d4:l),%a0
    2a1e:	2009           	movel %a1,%d0
    2a20:	d087           	addl %d7,%d0
    2a22:	4def 0060      	lea %sp@(96),%fp
      buf[len++] = '0';
    2a26:	10bc 0030      	moveb #48,%a0@
    2a2a:	2208           	movel %a0,%d1
    2a2c:	5288           	addql #1,%a0
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2a2e:	b1c0           	cmpal %d0,%a0
    2a30:	6700 0100      	beqw 2b32 <_ntoa_long+0x4ac>
    2a34:	bdc8           	cmpal %a0,%fp
    2a36:	66ee           	bnes 2a26 <_ntoa_long+0x3a0>
  if (flags & FLAGS_HASH) {
    2a38:	4aaf 0036      	tstl %sp@(54)
    2a3c:	6700 00d4      	beqw 2b12 <_ntoa_long+0x48c>
    2a40:	9dce           	subal %fp,%fp
    2a42:	7820           	moveq #32,%d4
    2a44:	6000 fd28      	braw 276e <_ntoa_long+0xe8>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2a48:	b8af 0080      	cmpl %sp@(128),%d4
    2a4c:	6400 fd18      	bccw 2766 <_ntoa_long+0xe0>
    2a50:	7220           	moveq #32,%d1
    2a52:	b284           	cmpl %d4,%d1
    2a54:	6600 fe82      	bnew 28d8 <_ntoa_long+0x252>
  if (flags & FLAGS_HASH) {
    2a58:	4aaf 0036      	tstl %sp@(54)
    2a5c:	6600 0250      	bnew 2cae <_ntoa_long+0x628>
    for (size_t i = len; i < width; i++) {
    2a60:	7820           	moveq #32,%d4
    2a62:	b887           	cmpl %d7,%d4
    2a64:	6500 fd52      	bcsw 27b8 <_ntoa_long+0x132>
    2a68:	6000 feda      	braw 2944 <_ntoa_long+0x2be>
  if (!(flags & FLAGS_LEFT)) {
    2a6c:	3c7c 0002      	moveaw #2,%fp
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2a70:	7203           	moveq #3,%d1
    2a72:	c280           	andl %d0,%d1
      buf[len++] = '-';
    2a74:	2802           	movel %d2,%d4
    if (negative) {
    2a76:	4a2f 003f      	tstb %sp@(63)
    2a7a:	6600 fd28      	bnew 27a4 <_ntoa_long+0x11e>
    else if (flags & FLAGS_PLUS) {
    2a7e:	0800 0002      	btst #2,%d0
    2a82:	6700 00e8      	beqw 2b6c <_ntoa_long+0x4e6>
      buf[len++] = '+';  // ignore the space if the '+' exists
    2a86:	5284           	addql #1,%d4
    2a88:	1fbc 002b 2840 	moveb #43,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2a8e:	4a81           	tstl %d1
    2a90:	6600 feb2      	bnew 2944 <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    2a94:	b887           	cmpl %d7,%d4
    2a96:	6500 fd20      	bcsw 27b8 <_ntoa_long+0x132>
    2a9a:	6000 fea8      	braw 2944 <_ntoa_long+0x2be>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2a9e:	b8af 0080      	cmpl %sp@(128),%d4
    2aa2:	6706           	beqs 2aaa <_ntoa_long+0x424>
    2aa4:	be84           	cmpl %d4,%d7
    2aa6:	6600 fe76      	bnew 291e <_ntoa_long+0x298>
      len--;
    2aaa:	2004           	movel %d4,%d0
    2aac:	5380           	subql #1,%d0
      if (len && (base == 16U)) {
    2aae:	7201           	moveq #1,%d1
    2ab0:	b284           	cmpl %d4,%d1
    2ab2:	6700 fcc8      	beqw 277c <_ntoa_long+0xf6>
    2ab6:	7210           	moveq #16,%d1
    2ab8:	b283           	cmpl %d3,%d1
    2aba:	6700 01a8      	beqw 2c64 <_ntoa_long+0x5de>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2abe:	7202           	moveq #2,%d1
      len--;
    2ac0:	2800           	movel %d0,%d4
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2ac2:	b283           	cmpl %d3,%d1
    2ac4:	6600 feda      	bnew 29a0 <_ntoa_long+0x31a>
    2ac8:	7003           	moveq #3,%d0
    2aca:	c0af 0088      	andl %sp@(136),%d0
      buf[len++] = 'b';
    2ace:	1fbc 0062 4840 	moveb #98,%sp@(40,%d4:l)
    2ad4:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2ad6:	7220           	moveq #32,%d1
    2ad8:	b284           	cmpl %d4,%d1
    2ada:	6700 fe5c      	beqw 2938 <_ntoa_long+0x2b2>
    2ade:	6000 febe      	braw 299e <_ntoa_long+0x318>
    2ae2:	202f 0088      	movel %sp@(136),%d0
    2ae6:	2404           	movel %d4,%d2
    2ae8:	6000 fcac      	braw 2796 <_ntoa_long+0x110>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2aec:	7220           	moveq #32,%d1
    2aee:	b284           	cmpl %d4,%d1
    2af0:	66dc           	bnes 2ace <_ntoa_long+0x448>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2af2:	4a80           	tstl %d0
    2af4:	6600 fe4e      	bnew 2944 <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    2af8:	7020           	moveq #32,%d0
    2afa:	b087           	cmpl %d7,%d0
    2afc:	6400 fe46      	bccw 2944 <_ntoa_long+0x2be>
    2b00:	242f 006c      	movel %sp@(108),%d2
    2b04:	2604           	movel %d4,%d3
    2b06:	9682           	subl %d2,%d3
    2b08:	6000 fcb6      	braw 27c0 <_ntoa_long+0x13a>
      width--;
    2b0c:	5387           	subql #1,%d7
    2b0e:	6000 fdb8      	braw 28c8 <_ntoa_long+0x242>
  if (flags & FLAGS_HASH) {
    2b12:	9dce           	subal %fp,%fp
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2b14:	7003           	moveq #3,%d0
    2b16:	c0af 0088      	andl %sp@(136),%d0
    2b1a:	6600 fe9e      	bnew 29ba <_ntoa_long+0x334>
    2b1e:	6000 ff40      	braw 2a60 <_ntoa_long+0x3da>
    2b22:	91c8           	subal %a0,%a0
    2b24:	226f 006c      	moveal %sp@(108),%a1
    2b28:	43f1 8801      	lea %a1@(1,%a0:l),%a1
    2b2c:	2609           	movel %a1,%d3
    2b2e:	6000 fcc6      	braw 27f6 <_ntoa_long+0x170>
      buf[len++] = '0';
    2b32:	307c 0001      	moveaw #1,%a0
    2b36:	91c9           	subal %a1,%a0
    2b38:	2808           	movel %a0,%d4
    2b3a:	d881           	addl %d1,%d4
    2b3c:	9dce           	subal %fp,%fp
  if (flags & FLAGS_HASH) {
    2b3e:	4aaf 0036      	tstl %sp@(54)
    2b42:	6600 fc2a      	bnew 276e <_ntoa_long+0xe8>
    2b46:	6000 fe60      	braw 29a8 <_ntoa_long+0x322>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2b4a:	7220           	moveq #32,%d1
    2b4c:	082f 0005 008b 	btst #5,%sp@(139)
    2b52:	6600 00ca      	bnew 2c1e <_ntoa_long+0x598>
    2b56:	b284           	cmpl %d4,%d1
    2b58:	6600 00b0      	bnew 2c0a <_ntoa_long+0x584>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2b5c:	4a80           	tstl %d0
    2b5e:	6600 fde4      	bnew 2944 <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    2b62:	b287           	cmpl %d7,%d1
    2b64:	6500 fc52      	bcsw 27b8 <_ntoa_long+0x132>
    2b68:	6000 fdda      	braw 2944 <_ntoa_long+0x2be>
    else if (flags & FLAGS_SPACE) {
    2b6c:	0800 0003      	btst #3,%d0
    2b70:	6640           	bnes 2bb2 <_ntoa_long+0x52c>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2b72:	4a81           	tstl %d1
    2b74:	6600 00d8      	bnew 2c4e <_ntoa_long+0x5c8>
    for (size_t i = len; i < width; i++) {
    2b78:	b487           	cmpl %d7,%d2
    2b7a:	6500 fc3c      	bcsw 27b8 <_ntoa_long+0x132>
  while (len) {
    2b7e:	4a82           	tstl %d2
    2b80:	6600 fdc2      	bnew 2944 <_ntoa_long+0x2be>
    2b84:	242f 006c      	movel %sp@(108),%d2
}
    2b88:	2002           	movel %d2,%d0
    2b8a:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2b8e:	4fef 0034      	lea %sp@(52),%sp
    2b92:	4e75           	rts
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2b94:	082f 0005 008b 	btst #5,%sp@(139)
    2b9a:	662e           	bnes 2bca <_ntoa_long+0x544>
      buf[len++] = 'x';
    2b9c:	1f7c 0078 0040 	moveb #120,%sp@(64)
      buf[len++] = '0';
    2ba2:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    2ba8:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    2bac:	7402           	moveq #2,%d2
    2bae:	6000 fbe6      	braw 2796 <_ntoa_long+0x110>
      buf[len++] = ' ';
    2bb2:	5284           	addql #1,%d4
    2bb4:	1fbc 0020 2840 	moveb #32,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2bba:	4a81           	tstl %d1
    2bbc:	6600 fd86      	bnew 2944 <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    2bc0:	b887           	cmpl %d7,%d4
    2bc2:	6500 fbf4      	bcsw 27b8 <_ntoa_long+0x132>
    2bc6:	6000 fd7c      	braw 2944 <_ntoa_long+0x2be>
      buf[len++] = 'X';
    2bca:	1f7c 0058 0040 	moveb #88,%sp@(64)
      buf[len++] = '0';
    2bd0:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    2bd6:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    2bda:	7402           	moveq #2,%d2
    2bdc:	6000 fbb8      	braw 2796 <_ntoa_long+0x110>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2be0:	7220           	moveq #32,%d1
    2be2:	b287           	cmpl %d7,%d1
    2be4:	6400 fe08      	bccw 29ee <_ntoa_long+0x368>
  if (flags & FLAGS_HASH) {
    2be8:	4aaf 0036      	tstl %sp@(54)
    2bec:	6700 ff24      	beqw 2b12 <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2bf0:	4aaf 0032      	tstl %sp@(50)
    2bf4:	6600 00aa      	bnew 2ca0 <_ntoa_long+0x61a>
    2bf8:	7220           	moveq #32,%d1
    2bfa:	9dce           	subal %fp,%fp
    2bfc:	b2af 0080      	cmpl %sp@(128),%d1
    2c00:	6600 fd1c      	bnew 291e <_ntoa_long+0x298>
      len--;
    2c04:	701f           	moveq #31,%d0
    2c06:	6000 feae      	braw 2ab6 <_ntoa_long+0x430>
      buf[len++] = 'x';
    2c0a:	1fbc 0078 4840 	moveb #120,%sp@(40,%d4:l)
    2c10:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2c12:	7220           	moveq #32,%d1
    2c14:	b284           	cmpl %d4,%d1
    2c16:	6700 fd20      	beqw 2938 <_ntoa_long+0x2b2>
    2c1a:	6000 fd82      	braw 299e <_ntoa_long+0x318>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2c1e:	b284           	cmpl %d4,%d1
    2c20:	6700 fed0      	beqw 2af2 <_ntoa_long+0x46c>
      buf[len++] = 'X';
    2c24:	1fbc 0058 4840 	moveb #88,%sp@(40,%d4:l)
    2c2a:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2c2c:	7220           	moveq #32,%d1
    2c2e:	b284           	cmpl %d4,%d1
    2c30:	6700 fd06      	beqw 2938 <_ntoa_long+0x2b2>
    2c34:	6000 fd68      	braw 299e <_ntoa_long+0x318>
      buf[len++] = 'b';
    2c38:	1f7c 0062 0040 	moveb #98,%sp@(64)
      buf[len++] = '0';
    2c3e:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    2c44:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    2c48:	7402           	moveq #2,%d2
    2c4a:	6000 fb4a      	braw 2796 <_ntoa_long+0x110>
    2c4e:	262f 006c      	movel %sp@(108),%d3
    2c52:	6000 fba2      	braw 27f6 <_ntoa_long+0x170>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2c56:	9dce           	subal %fp,%fp
  if (flags & FLAGS_HASH) {
    2c58:	4aaf 0036      	tstl %sp@(54)
    2c5c:	6600 fb10      	bnew 276e <_ntoa_long+0xe8>
    2c60:	6000 fd46      	braw 29a8 <_ntoa_long+0x322>
      buf[len++] = 'x';
    2c64:	41f7 483e      	lea %sp@(3e,%d4:l),%a0
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2c68:	082f 0005 008b 	btst #5,%sp@(139)
    2c6e:	6600 fd28      	bnew 2998 <_ntoa_long+0x312>
      buf[len++] = 'x';
    2c72:	2004           	movel %d4,%d0
    2c74:	5380           	subql #1,%d0
    2c76:	10bc 0078      	moveb #120,%a0@
      buf[len++] = '0';
    2c7a:	1fbc 0030 0840 	moveb #48,%sp@(40,%d0:l)
    2c80:	6000 fd26      	braw 29a8 <_ntoa_long+0x322>
  if (flags & FLAGS_HASH) {
    2c84:	4aaf 0036      	tstl %sp@(54)
    2c88:	6700 fe88      	beqw 2b12 <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2c8c:	4aaf 0032      	tstl %sp@(50)
    2c90:	660e           	bnes 2ca0 <_ntoa_long+0x61a>
    2c92:	7020           	moveq #32,%d0
    2c94:	b0af 0080      	cmpl %sp@(128),%d0
    2c98:	6738           	beqs 2cd2 <_ntoa_long+0x64c>
    2c9a:	7220           	moveq #32,%d1
    2c9c:	b287           	cmpl %d7,%d1
    2c9e:	6732           	beqs 2cd2 <_ntoa_long+0x64c>
    2ca0:	9dce           	subal %fp,%fp
    2ca2:	6000 fc7a      	braw 291e <_ntoa_long+0x298>
  if (flags & FLAGS_HASH) {
    2ca6:	4aaf 0036      	tstl %sp@(54)
    2caa:	6700 fc98      	beqw 2944 <_ntoa_long+0x2be>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2cae:	4aaf 0032      	tstl %sp@(50)
    2cb2:	6708           	beqs 2cbc <_ntoa_long+0x636>
    2cb4:	9dce           	subal %fp,%fp
    2cb6:	7820           	moveq #32,%d4
    2cb8:	6000 fc64      	braw 291e <_ntoa_long+0x298>
    2cbc:	7020           	moveq #32,%d0
    2cbe:	7820           	moveq #32,%d4
    2cc0:	b0af 0080      	cmpl %sp@(128),%d0
    2cc4:	6714           	beqs 2cda <_ntoa_long+0x654>
    2cc6:	9dce           	subal %fp,%fp
    2cc8:	be84           	cmpl %d4,%d7
    2cca:	6600 fc52      	bnew 291e <_ntoa_long+0x298>
    2cce:	6000 fdda      	braw 2aaa <_ntoa_long+0x424>
    2cd2:	9dce           	subal %fp,%fp
      len--;
    2cd4:	701f           	moveq #31,%d0
    2cd6:	6000 fdde      	braw 2ab6 <_ntoa_long+0x430>
    2cda:	701f           	moveq #31,%d0
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2cdc:	9dce           	subal %fp,%fp
    2cde:	6000 fdd6      	braw 2ab6 <_ntoa_long+0x430>

00002ce2 <_out_char>:
{
    2ce2:	202f 0004      	movel %sp@(4),%d0
  if (character) {
    2ce6:	4a00           	tstb %d0
    2ce8:	6602           	bnes 2cec <_out_char+0xa>
}
    2cea:	4e75           	rts
    _putchar(character);
    2cec:	4880           	extw %d0
    2cee:	3040           	moveaw %d0,%a0
    2cf0:	2f48 0004      	movel %a0,%sp@(4)
    2cf4:	4ef9 0000 3556 	jmp 3556 <_putchar>

00002cfa <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    2cfa:	4fef fff4      	lea %sp@(-12),%sp
    2cfe:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    2d02:	2a6f 003c      	moveal %sp@(60),%a5
    2d06:	2c2f 0040      	movel %sp@(64),%d6
    2d0a:	242f 0044      	movel %sp@(68),%d2
    2d0e:	286f 0048      	moveal %sp@(72),%a4
    2d12:	262f 004c      	movel %sp@(76),%d3
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    2d16:	4a86           	tstl %d6
    2d18:	6700 023e      	beqw 2f58 <_vsnprintf+0x25e>
    // use null output function
    out = _out_null;
  }

  while (*format)
    2d1c:	1014           	moveb %a4@,%d0
    2d1e:	95ca           	subal %a2,%a2
    2d20:	4a00           	tstb %d0
    2d22:	6700 0244      	beqw 2f68 <_vsnprintf+0x26e>
    }

    // evaluate flags
    flags = 0U;
    do {
      switch (*format) {
    2d26:	2c7c 0000 2d96 	moveal #11670,%fp
      format++;
    2d2c:	528c           	addql #1,%a4
    if (*format != '%') {
    2d2e:	0c00 0025      	cmpib #37,%d0
    2d32:	6740           	beqs 2d74 <_vsnprintf+0x7a>
      out(*format, buffer, idx++, maxlen);
    2d34:	280a           	movel %a2,%d4
    2d36:	5284           	addql #1,%d4
    2d38:	2f02           	movel %d2,%sp@-
    2d3a:	2f0a           	movel %a2,%sp@-
    2d3c:	2f06           	movel %d6,%sp@-
    2d3e:	4880           	extw %d0
    2d40:	3040           	moveaw %d0,%a0
    2d42:	2f08           	movel %a0,%sp@-
    2d44:	4e95           	jsr %a5@
      continue;
    2d46:	4fef 0010      	lea %sp@(16),%sp
      out(*format, buffer, idx++, maxlen);
    2d4a:	2444           	moveal %d4,%a2
  while (*format)
    2d4c:	1014           	moveb %a4@,%d0
    2d4e:	66dc           	bnes 2d2c <_vsnprintf+0x32>

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
    2d50:	260a           	movel %a2,%d3
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2d52:	b5c2           	cmpal %d2,%a2
    2d54:	6504           	bcss 2d5a <_vsnprintf+0x60>
    2d56:	2442           	moveal %d2,%a2
    2d58:	538a           	subql #1,%a2
    2d5a:	2f02           	movel %d2,%sp@-
    2d5c:	2f0a           	movel %a2,%sp@-
    2d5e:	2f06           	movel %d6,%sp@-
    2d60:	42a7           	clrl %sp@-
    2d62:	4e95           	jsr %a5@
  return (int)idx;
    2d64:	4fef 0010      	lea %sp@(16),%sp
}
    2d68:	2003           	movel %d3,%d0
    2d6a:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2d6e:	4fef 000c      	lea %sp@(12),%sp
    2d72:	4e75           	rts
    flags = 0U;
    2d74:	7200           	moveq #0,%d1
      switch (*format) {
    2d76:	204c           	moveal %a4,%a0
    2d78:	1018           	moveb %a0@+,%d0
    2d7a:	1800           	moveb %d0,%d4
    2d7c:	0604 ffe0      	addib #-32,%d4
    2d80:	0c04 0010      	cmpib #16,%d4
    2d84:	6232           	bhis 2db8 <_vsnprintf+0xbe>
    2d86:	0284 0000 00ff 	andil #255,%d4
    2d8c:	d884           	addl %d4,%d4
    2d8e:	3276 4800      	moveaw %fp@(0,%d4:l),%a1
    2d92:	4efb 9002      	jmp %pc@(2d96 <_vsnprintf+0x9c>,%a1:w)
    2d96:	00e2           	.short 0x00e2
    2d98:	0022 0022      	orib #34,%a2@-
    2d9c:	00d8           	.short 0x00d8
    2d9e:	0022 0022      	orib #34,%a2@-
    2da2:	0022 0022      	orib #34,%a2@-
    2da6:	0022 0022      	orib #34,%a2@-
    2daa:	0022 00ce      	orib #-50,%a2@-
    2dae:	0022 00c4      	orib #-60,%a2@-
    2db2:	0022 0022      	orib #34,%a2@-
    2db6:	00ba           	.short 0x00ba
  return (ch >= '0') && (ch <= '9');
    2db8:	1800           	moveb %d0,%d4
    2dba:	0604 ffd0      	addib #-48,%d4
    if (_is_digit(*format)) {
    2dbe:	0c04 0009      	cmpib #9,%d4
    2dc2:	6300 00be      	blsw 2e82 <_vsnprintf+0x188>
    else if (*format == '*') {
    2dc6:	0c00 002a      	cmpib #42,%d0
    2dca:	6700 0172      	beqw 2f3e <_vsnprintf+0x244>
    width = 0U;
    2dce:	97cb           	subal %a3,%a3
    if (*format == '.') {
    2dd0:	0c00 002e      	cmpib #46,%d0
    2dd4:	6700 00fc      	beqw 2ed2 <_vsnprintf+0x1d8>
    precision = 0U;
    2dd8:	7e00           	moveq #0,%d7
        format++;
    2dda:	2808           	movel %a0,%d4
    switch (*format) {
    2ddc:	0c00 006c      	cmpib #108,%d0
    2de0:	6700 011e      	beqw 2f00 <_vsnprintf+0x206>
    2de4:	0c00 006c      	cmpib #108,%d0
    2de8:	6e00 0136      	bgtw 2f20 <_vsnprintf+0x226>
    2dec:	0c00 0068      	cmpib #104,%d0
    2df0:	6700 02c8      	beqw 30ba <_vsnprintf+0x3c0>
    2df4:	0c00 006a      	cmpib #106,%d0
    2df8:	6600 017a      	bnew 2f74 <_vsnprintf+0x27a>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2dfc:	0041 0200      	oriw #512,%d1
        if (*format == 'l') {
    2e00:	102c 0001      	moveb %a4@(1),%d0
        format++;
    2e04:	2844           	moveal %d4,%a4
    2e06:	528c           	addql #1,%a4
    switch (*format) {
    2e08:	0c00 0078      	cmpib #120,%d0
    2e0c:	6e00 0198      	bgtw 2fa6 <_vsnprintf+0x2ac>
    2e10:	0c00 0063      	cmpib #99,%d0
    2e14:	6e00 0168      	bgtw 2f7e <_vsnprintf+0x284>
    2e18:	0c00 0062      	cmpib #98,%d0
    2e1c:	6700 05de      	beqw 33fc <_vsnprintf+0x702>
    2e20:	0c00 0063      	cmpib #99,%d0
    2e24:	6700 0362      	beqw 3188 <_vsnprintf+0x48e>
    2e28:	0c00 0025      	cmpib #37,%d0
    2e2c:	6600 050a      	bnew 3338 <_vsnprintf+0x63e>
        out('%', buffer, idx++, maxlen);
    2e30:	280a           	movel %a2,%d4
    2e32:	5284           	addql #1,%d4
    2e34:	2f02           	movel %d2,%sp@-
    2e36:	2f0a           	movel %a2,%sp@-
    2e38:	2f06           	movel %d6,%sp@-
    2e3a:	4878 0025      	pea 25 <R_STOPCNTCMD+0x7>
    2e3e:	4e95           	jsr %a5@
        break;
    2e40:	4fef 0010      	lea %sp@(16),%sp
        out('%', buffer, idx++, maxlen);
    2e44:	2444           	moveal %d4,%a2
  while (*format)
    2e46:	1014           	moveb %a4@,%d0
    2e48:	6600 fee2      	bnew 2d2c <_vsnprintf+0x32>
    2e4c:	6000 ff02      	braw 2d50 <_vsnprintf+0x56>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    2e50:	7001           	moveq #1,%d0
    2e52:	8280           	orl %d0,%d1
  while (*format)
    2e54:	2848           	moveal %a0,%a4
    2e56:	6000 ff1e      	braw 2d76 <_vsnprintf+0x7c>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    2e5a:	7a02           	moveq #2,%d5
    2e5c:	8285           	orl %d5,%d1
  while (*format)
    2e5e:	2848           	moveal %a0,%a4
    2e60:	6000 ff14      	braw 2d76 <_vsnprintf+0x7c>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    2e64:	7004           	moveq #4,%d0
    2e66:	8280           	orl %d0,%d1
  while (*format)
    2e68:	2848           	moveal %a0,%a4
    2e6a:	6000 ff0a      	braw 2d76 <_vsnprintf+0x7c>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    2e6e:	7010           	moveq #16,%d0
    2e70:	8280           	orl %d0,%d1
  while (*format)
    2e72:	2848           	moveal %a0,%a4
    2e74:	6000 ff00      	braw 2d76 <_vsnprintf+0x7c>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    2e78:	7a08           	moveq #8,%d5
    2e7a:	8285           	orl %d5,%d1
  while (*format)
    2e7c:	2848           	moveal %a0,%a4
    2e7e:	6000 fef6      	braw 2d76 <_vsnprintf+0x7c>
  unsigned int i = 0U;
    2e82:	97cb           	subal %a3,%a3
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2e84:	2848           	moveal %a0,%a4
    2e86:	43f3 b800      	lea %a3@(0,%a3:l),%a1
    2e8a:	d3c9           	addal %a1,%a1
    2e8c:	47f1 b800      	lea %a1@(0,%a3:l),%a3
    2e90:	d7cb           	addal %a3,%a3
    2e92:	4880           	extw %d0
    2e94:	47f3 00d0      	lea %a3@(ffffffffffffffd0,%d0:w),%a3
  while (_is_digit(**str)) {
    2e98:	1010           	moveb %a0@,%d0
  return (ch >= '0') && (ch <= '9');
    2e9a:	1800           	moveb %d0,%d4
    2e9c:	0604 ffd0      	addib #-48,%d4
    2ea0:	5288           	addql #1,%a0
  while (_is_digit(**str)) {
    2ea2:	0c04 0009      	cmpib #9,%d4
    2ea6:	6200 ff28      	bhiw 2dd0 <_vsnprintf+0xd6>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2eaa:	2848           	moveal %a0,%a4
    2eac:	43f3 b800      	lea %a3@(0,%a3:l),%a1
    2eb0:	d3c9           	addal %a1,%a1
    2eb2:	47f1 b800      	lea %a1@(0,%a3:l),%a3
    2eb6:	d7cb           	addal %a3,%a3
    2eb8:	4880           	extw %d0
    2eba:	47f3 00d0      	lea %a3@(ffffffffffffffd0,%d0:w),%a3
  while (_is_digit(**str)) {
    2ebe:	1010           	moveb %a0@,%d0
  return (ch >= '0') && (ch <= '9');
    2ec0:	1800           	moveb %d0,%d4
    2ec2:	0604 ffd0      	addib #-48,%d4
    2ec6:	5288           	addql #1,%a0
  while (_is_digit(**str)) {
    2ec8:	0c04 0009      	cmpib #9,%d4
    2ecc:	63b6           	blss 2e84 <_vsnprintf+0x18a>
    2ece:	6000 ff00      	braw 2dd0 <_vsnprintf+0xd6>
      flags |= FLAGS_PRECISION;
    2ed2:	0041 0400      	oriw #1024,%d1
      if (_is_digit(*format)) {
    2ed6:	102c 0001      	moveb %a4@(1),%d0
  return (ch >= '0') && (ch <= '9');
    2eda:	1a00           	moveb %d0,%d5
    2edc:	0605 ffd0      	addib #-48,%d5
      if (_is_digit(*format)) {
    2ee0:	0c05 0009      	cmpib #9,%d5
    2ee4:	6300 02f6      	blsw 31dc <_vsnprintf+0x4e2>
      else if (*format == '*') {
    2ee8:	0c00 002a      	cmpib #42,%d0
    2eec:	6700 0334      	beqw 3222 <_vsnprintf+0x528>
      format++;
    2ef0:	2848           	moveal %a0,%a4
    precision = 0U;
    2ef2:	7e00           	moveq #0,%d7
    2ef4:	5288           	addql #1,%a0
        format++;
    2ef6:	2808           	movel %a0,%d4
    switch (*format) {
    2ef8:	0c00 006c      	cmpib #108,%d0
    2efc:	6600 fee6      	bnew 2de4 <_vsnprintf+0xea>
        if (*format == 'l') {
    2f00:	102c 0001      	moveb %a4@(1),%d0
    2f04:	0c00 006c      	cmpib #108,%d0
    2f08:	6700 040a      	beqw 3314 <_vsnprintf+0x61a>
        flags |= FLAGS_LONG;
    2f0c:	0041 0100      	oriw #256,%d1
        format++;
    2f10:	2844           	moveal %d4,%a4
    2f12:	528c           	addql #1,%a4
    switch (*format) {
    2f14:	0c00 0078      	cmpib #120,%d0
    2f18:	6f00 fef6      	blew 2e10 <_vsnprintf+0x116>
    2f1c:	6000 0088      	braw 2fa6 <_vsnprintf+0x2ac>
    switch (*format) {
    2f20:	0c00 007a      	cmpib #122,%d0
    2f24:	6600 00a2      	bnew 2fc8 <_vsnprintf+0x2ce>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2f28:	0041 0100      	oriw #256,%d1
        if (*format == 'l') {
    2f2c:	102c 0001      	moveb %a4@(1),%d0
        format++;
    2f30:	2844           	moveal %d4,%a4
    2f32:	528c           	addql #1,%a4
    switch (*format) {
    2f34:	0c00 0078      	cmpib #120,%d0
    2f38:	6f00 fed6      	blew 2e10 <_vsnprintf+0x116>
    2f3c:	6068           	bras 2fa6 <_vsnprintf+0x2ac>
      const int w = va_arg(va, int);
    2f3e:	2243           	moveal %d3,%a1
    2f40:	2659           	moveal %a1@+,%a3
    2f42:	2609           	movel %a1,%d3
      if (w < 0) {
    2f44:	b6fc 0000      	cmpaw #0,%a3
    2f48:	6d00 0124      	bltw 306e <_vsnprintf+0x374>
    if (*format == '.') {
    2f4c:	102c 0001      	moveb %a4@(1),%d0
      format++;
    2f50:	2848           	moveal %a0,%a4
    2f52:	5288           	addql #1,%a0
    2f54:	6000 fe7a      	braw 2dd0 <_vsnprintf+0xd6>
    out = _out_null;
    2f58:	4bf9 0000 2684 	lea 2684 <_out_null>,%a5
  while (*format)
    2f5e:	1014           	moveb %a4@,%d0
    2f60:	95ca           	subal %a2,%a2
    2f62:	4a00           	tstb %d0
    2f64:	6600 fdc0      	bnew 2d26 <_vsnprintf+0x2c>
    2f68:	7600           	moveq #0,%d3
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2f6a:	b5c2           	cmpal %d2,%a2
    2f6c:	6500 fdec      	bcsw 2d5a <_vsnprintf+0x60>
    2f70:	6000 fde4      	braw 2d56 <_vsnprintf+0x5c>
        format++;
    2f74:	2848           	moveal %a0,%a4
    switch (*format) {
    2f76:	0c00 0063      	cmpib #99,%d0
    2f7a:	6f00 fe9c      	blew 2e18 <_vsnprintf+0x11e>
    2f7e:	1a00           	moveb %d0,%d5
    2f80:	0605 ff9c      	addib #-100,%d5
    2f84:	0285 0000 00ff 	andil #255,%d5
    2f8a:	7801           	moveq #1,%d4
    2f8c:	ebac           	lsll %d5,%d4
    2f8e:	0284 0012 0821 	andil #1181729,%d4
    2f94:	6652           	bnes 2fe8 <_vsnprintf+0x2ee>
    2f96:	0c00 0073      	cmpib #115,%d0
    2f9a:	6700 0140      	beqw 30dc <_vsnprintf+0x3e2>
    2f9e:	0c00 0070      	cmpib #112,%d0
    2fa2:	6700 00e0      	beqw 3084 <_vsnprintf+0x38a>
        out(*format, buffer, idx++, maxlen);
    2fa6:	280a           	movel %a2,%d4
    2fa8:	5284           	addql #1,%d4
    2faa:	2f02           	movel %d2,%sp@-
    2fac:	2f0a           	movel %a2,%sp@-
    2fae:	2f06           	movel %d6,%sp@-
    2fb0:	4880           	extw %d0
    2fb2:	3240           	moveaw %d0,%a1
    2fb4:	2f09           	movel %a1,%sp@-
    2fb6:	4e95           	jsr %a5@
        break;
    2fb8:	4fef 0010      	lea %sp@(16),%sp
        out(*format, buffer, idx++, maxlen);
    2fbc:	2444           	moveal %d4,%a2
  while (*format)
    2fbe:	1014           	moveb %a4@,%d0
    2fc0:	6600 fd6a      	bnew 2d2c <_vsnprintf+0x32>
    2fc4:	6000 fd8a      	braw 2d50 <_vsnprintf+0x56>
        format++;
    2fc8:	2848           	moveal %a0,%a4
    switch (*format) {
    2fca:	0c00 0078      	cmpib #120,%d0
    2fce:	6ed6           	bgts 2fa6 <_vsnprintf+0x2ac>
    2fd0:	1a00           	moveb %d0,%d5
    2fd2:	0605 ff9c      	addib #-100,%d5
    2fd6:	0285 0000 00ff 	andil #255,%d5
    2fdc:	7801           	moveq #1,%d4
    2fde:	ebac           	lsll %d5,%d4
    2fe0:	0284 0012 0821 	andil #1181729,%d4
    2fe6:	67ae           	beqs 2f96 <_vsnprintf+0x29c>
        if (*format == 'x' || *format == 'X') {
    2fe8:	0c00 006f      	cmpib #111,%d0
    2fec:	6700 025c      	beqw 324a <_vsnprintf+0x550>
    2ff0:	6e00 03f2      	bgtw 33e4 <_vsnprintf+0x6ea>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    2ff4:	78ef           	moveq #-17,%d4
    2ff6:	c881           	andl %d1,%d4
        if ((*format != 'i') && (*format != 'd')) {
    2ff8:	0c00 0069      	cmpib #105,%d0
    2ffc:	6600 045e      	bnew 345c <_vsnprintf+0x762>
        if (flags & FLAGS_PRECISION) {
    3000:	0801 000a      	btst #10,%d1
    3004:	6704           	beqs 300a <_vsnprintf+0x310>
          flags &= ~FLAGS_ZEROPAD;
    3006:	78ee           	moveq #-18,%d4
    3008:	c881           	andl %d1,%d4
          if (flags & FLAGS_LONG_LONG) {
    300a:	0804 0009      	btst #9,%d4
    300e:	6600 fd3c      	bnew 2d4c <_vsnprintf+0x52>
            const long value = va_arg(va, long);
    3012:	2a03           	movel %d3,%d5
    3014:	5885           	addql #4,%d5
          else if (flags & FLAGS_LONG) {
    3016:	0804 0008      	btst #8,%d4
    301a:	6600 0470      	bnew 348c <_vsnprintf+0x792>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    301e:	0804 0006      	btst #6,%d4
    3022:	6600 03e0      	bnew 3404 <_vsnprintf+0x70a>
    3026:	4a04           	tstb %d4
    3028:	6a00 04ac      	bplw 34d6 <_vsnprintf+0x7dc>
    302c:	2043           	moveal %d3,%a0
    302e:	2010           	movel %a0@,%d0
    3030:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3032:	2f04           	movel %d4,%sp@-
    3034:	2f0b           	movel %a3,%sp@-
    3036:	2f07           	movel %d7,%sp@-
    3038:	4878 000a      	pea a <DUART_IMR>
    303c:	2200           	movel %d0,%d1
    303e:	d281           	addl %d1,%d1
    3040:	9381           	subxl %d1,%d1
    3042:	4481           	negl %d1
    3044:	2f01           	movel %d1,%sp@-
    3046:	4a80           	tstl %d0
    3048:	6d00 03dc      	bltw 3426 <_vsnprintf+0x72c>
    304c:	2f00           	movel %d0,%sp@-
    304e:	2f02           	movel %d2,%sp@-
    3050:	2f0a           	movel %a2,%sp@-
    3052:	2f06           	movel %d6,%sp@-
    3054:	2f0d           	movel %a5,%sp@-
    3056:	4eb9 0000 2686 	jsr 2686 <_ntoa_long>
    305c:	2440           	moveal %d0,%a2
    305e:	4fef 0028      	lea %sp@(40),%sp
    3062:	2605           	movel %d5,%d3
  while (*format)
    3064:	1014           	moveb %a4@,%d0
    3066:	6600 fcc4      	bnew 2d2c <_vsnprintf+0x32>
    306a:	6000 fce4      	braw 2d50 <_vsnprintf+0x56>
        flags |= FLAGS_LEFT;    // reverse padding
    306e:	7002           	moveq #2,%d0
    3070:	8280           	orl %d0,%d1
        width = (unsigned int)-w;
    3072:	2a0b           	movel %a3,%d5
    3074:	4485           	negl %d5
    3076:	2645           	moveal %d5,%a3
    if (*format == '.') {
    3078:	102c 0001      	moveb %a4@(1),%d0
      format++;
    307c:	2848           	moveal %a0,%a4
    307e:	5288           	addql #1,%a0
    3080:	6000 fd4e      	braw 2dd0 <_vsnprintf+0xd6>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    3084:	7021           	moveq #33,%d0
    3086:	8081           	orl %d1,%d0
    3088:	2f00           	movel %d0,%sp@-
    308a:	4878 0008      	pea 8 <DUART_ACR>
    308e:	2f07           	movel %d7,%sp@-
    3090:	4878 0010      	pea 10 <DUART_MR1B>
    3094:	42a7           	clrl %sp@-
    3096:	2043           	moveal %d3,%a0
    3098:	2f18           	movel %a0@+,%sp@-
    309a:	2608           	movel %a0,%d3
    309c:	2f02           	movel %d2,%sp@-
    309e:	2f0a           	movel %a2,%sp@-
    30a0:	2f06           	movel %d6,%sp@-
    30a2:	2f0d           	movel %a5,%sp@-
    30a4:	4eb9 0000 2686 	jsr 2686 <_ntoa_long>
    30aa:	2440           	moveal %d0,%a2
        break;
    30ac:	4fef 0028      	lea %sp@(40),%sp
  while (*format)
    30b0:	1014           	moveb %a4@,%d0
    30b2:	6600 fc78      	bnew 2d2c <_vsnprintf+0x32>
    30b6:	6000 fc98      	braw 2d50 <_vsnprintf+0x56>
        if (*format == 'h') {
    30ba:	102c 0001      	moveb %a4@(1),%d0
    30be:	0c00 0068      	cmpib #104,%d0
    30c2:	6700 0232      	beqw 32f6 <_vsnprintf+0x5fc>
        flags |= FLAGS_SHORT;
    30c6:	7a7f           	moveq #127,%d5
    30c8:	4605           	notb %d5
    30ca:	8285           	orl %d5,%d1
        format++;
    30cc:	2844           	moveal %d4,%a4
    30ce:	528c           	addql #1,%a4
    switch (*format) {
    30d0:	0c00 0078      	cmpib #120,%d0
    30d4:	6f00 fd3a      	blew 2e10 <_vsnprintf+0x116>
    30d8:	6000 fecc      	braw 2fa6 <_vsnprintf+0x2ac>
        const char* p = va_arg(va, char*);
    30dc:	2f43 0030      	movel %d3,%sp@(48)
    30e0:	2243           	moveal %d3,%a1
    30e2:	58af 0030      	addql #4,%sp@(48)
    30e6:	2619           	movel %a1@+,%d3
  for (s = str; *s && maxsize--; ++s);
    30e8:	2043           	moveal %d3,%a0
    30ea:	1f50 002f      	moveb %a0@,%sp@(47)
    30ee:	102f 002f      	moveb %sp@(47),%d0
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    30f2:	4a87           	tstl %d7
    30f4:	6700 0118      	beqw 320e <_vsnprintf+0x514>
  for (s = str; *s && maxsize--; ++s);
    30f8:	4a00           	tstb %d0
    30fa:	671a           	beqs 3116 <_vsnprintf+0x41c>
    30fc:	2807           	movel %d7,%d4
    30fe:	5384           	subql #1,%d4
    3100:	2043           	moveal %d3,%a0
    3102:	43f0 4801      	lea %a0@(1,%d4:l),%a1
    3106:	5288           	addql #1,%a0
    3108:	4a10           	tstb %a0@
    310a:	6700 01e2      	beqw 32ee <_vsnprintf+0x5f4>
    310e:	b1c9           	cmpal %a1,%a0
    3110:	66f4           	bnes 3106 <_vsnprintf+0x40c>
  return (unsigned int)(s - str);
    3112:	2809           	movel %a1,%d4
    3114:	9883           	subl %d3,%d4
        if (flags & FLAGS_PRECISION) {
    3116:	2a01           	movel %d1,%d5
    3118:	0285 0000 0400 	andil #1024,%d5
    311e:	2245           	moveal %d5,%a1
    3120:	0801 000a      	btst #10,%d1
    3124:	6706           	beqs 312c <_vsnprintf+0x432>
          l = (l < precision ? l : precision);
    3126:	be84           	cmpl %d4,%d7
    3128:	6402           	bccs 312c <_vsnprintf+0x432>
    312a:	2807           	movel %d7,%d4
        if (!(flags & FLAGS_LEFT)) {
    312c:	7a02           	moveq #2,%d5
    312e:	ca81           	andl %d1,%d5
    3130:	2f45 0034      	movel %d5,%sp@(52)
    3134:	0801 0001      	btst #1,%d1
    3138:	6700 0258      	beqw 3392 <_vsnprintf+0x698>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    313c:	4a2f 002f      	tstb %sp@(47)
    3140:	6700 017a      	beqw 32bc <_vsnprintf+0x5c2>
    3144:	220a           	movel %a2,%d1
    3146:	2a09           	movel %a1,%d5
    3148:	204b           	moveal %a3,%a0
    314a:	2643           	moveal %d3,%a3
    314c:	224c           	moveal %a4,%a1
    314e:	284a           	moveal %a2,%a4
    3150:	2447           	moveal %d7,%a2
    3152:	2e09           	movel %a1,%d7
    3154:	2608           	movel %a0,%d3
    3156:	4a85           	tstl %d5
    3158:	670e           	beqs 3168 <_vsnprintf+0x46e>
    315a:	41ea ffff      	lea %a2@(-1),%a0
    315e:	b4fc 0000      	cmpaw #0,%a2
    3162:	6700 014c      	beqw 32b0 <_vsnprintf+0x5b6>
    3166:	2448           	moveal %a0,%a2
          out(*(p++), buffer, idx++, maxlen);
    3168:	528c           	addql #1,%a4
    316a:	528b           	addql #1,%a3
    316c:	2f02           	movel %d2,%sp@-
    316e:	2f01           	movel %d1,%sp@-
    3170:	2f06           	movel %d6,%sp@-
    3172:	4880           	extw %d0
    3174:	3240           	moveaw %d0,%a1
    3176:	2f09           	movel %a1,%sp@-
    3178:	4e95           	jsr %a5@
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    317a:	1013           	moveb %a3@,%d0
    317c:	4fef 0010      	lea %sp@(16),%sp
    3180:	6700 012e      	beqw 32b0 <_vsnprintf+0x5b6>
    3184:	220c           	movel %a4,%d1
    3186:	60ce           	bras 3156 <_vsnprintf+0x45c>
      out(*format, buffer, idx++, maxlen);
    3188:	280a           	movel %a2,%d4
    318a:	5284           	addql #1,%d4
            const long value = va_arg(va, long);
    318c:	2a03           	movel %d3,%d5
    318e:	5885           	addql #4,%d5
        if (!(flags & FLAGS_LEFT)) {
    3190:	0801 0001      	btst #1,%d1
    3194:	6700 01b6      	beqw 334c <_vsnprintf+0x652>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    3198:	2f02           	movel %d2,%sp@-
    319a:	2f0a           	movel %a2,%sp@-
    319c:	2f06           	movel %d6,%sp@-
    319e:	2043           	moveal %d3,%a0
    31a0:	2010           	movel %a0@,%d0
    31a2:	4880           	extw %d0
    31a4:	3240           	moveaw %d0,%a1
    31a6:	2f09           	movel %a1,%sp@-
    31a8:	4e95           	jsr %a5@
          while (l++ < width) {
    31aa:	4fef 0010      	lea %sp@(16),%sp
    31ae:	d5cb           	addal %a3,%a2
    31b0:	7001           	moveq #1,%d0
    31b2:	b08b           	cmpl %a3,%d0
    31b4:	6400 02ce      	bccw 3484 <_vsnprintf+0x78a>
            out(' ', buffer, idx++, maxlen);
    31b8:	2004           	movel %d4,%d0
    31ba:	5284           	addql #1,%d4
    31bc:	2f02           	movel %d2,%sp@-
    31be:	2f00           	movel %d0,%sp@-
    31c0:	2f06           	movel %d6,%sp@-
    31c2:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    31c6:	4e95           	jsr %a5@
          while (l++ < width) {
    31c8:	4fef 0010      	lea %sp@(16),%sp
    31cc:	b5c4           	cmpal %d4,%a2
    31ce:	66e8           	bnes 31b8 <_vsnprintf+0x4be>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    31d0:	2605           	movel %d5,%d3
  while (*format)
    31d2:	1014           	moveb %a4@,%d0
    31d4:	6600 fb56      	bnew 2d2c <_vsnprintf+0x32>
    31d8:	6000 fb76      	braw 2d50 <_vsnprintf+0x56>
  unsigned int i = 0U;
    31dc:	7e00           	moveq #0,%d7
    31de:	2848           	moveal %a0,%a4
    31e0:	2047           	moveal %d7,%a0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    31e2:	528c           	addql #1,%a4
    31e4:	43f0 8800      	lea %a0@(0,%a0:l),%a1
    31e8:	d3c9           	addal %a1,%a1
    31ea:	41f1 8800      	lea %a1@(0,%a0:l),%a0
    31ee:	d1c8           	addal %a0,%a0
    31f0:	4880           	extw %d0
    31f2:	41f0 00d0      	lea %a0@(ffffffffffffffd0,%d0:w),%a0
  while (_is_digit(**str)) {
    31f6:	1014           	moveb %a4@,%d0
  return (ch >= '0') && (ch <= '9');
    31f8:	1800           	moveb %d0,%d4
    31fa:	0604 ffd0      	addib #-48,%d4
  while (_is_digit(**str)) {
    31fe:	0c04 0009      	cmpib #9,%d4
    3202:	63de           	blss 31e2 <_vsnprintf+0x4e8>
    3204:	2e08           	movel %a0,%d7
    3206:	41ec 0001      	lea %a4@(1),%a0
    320a:	6000 fbce      	braw 2dda <_vsnprintf+0xe0>
  for (s = str; *s && maxsize--; ++s);
    320e:	4a2f 002f      	tstb %sp@(47)
    3212:	6700 ff02      	beqw 3116 <_vsnprintf+0x41c>
    3216:	78fe           	moveq #-2,%d4
    3218:	2043           	moveal %d3,%a0
    321a:	43f0 4801      	lea %a0@(1,%d4:l),%a1
    321e:	6000 fee6      	braw 3106 <_vsnprintf+0x40c>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    3222:	2043           	moveal %d3,%a0
    3224:	2e18           	movel %a0@+,%d7
    3226:	2608           	movel %a0,%d3
    3228:	4a87           	tstl %d7
    322a:	6d0e           	blts 323a <_vsnprintf+0x540>
    switch (*format) {
    322c:	102c 0002      	moveb %a4@(2),%d0
        format++;
    3230:	548c           	addql #2,%a4
    3232:	41ec 0001      	lea %a4@(1),%a0
    3236:	6000 fba2      	braw 2dda <_vsnprintf+0xe0>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    323a:	7e00           	moveq #0,%d7
    switch (*format) {
    323c:	102c 0002      	moveb %a4@(2),%d0
        format++;
    3240:	548c           	addql #2,%a4
    3242:	41ec 0001      	lea %a4@(1),%a0
    3246:	6000 fb92      	braw 2dda <_vsnprintf+0xe0>
    switch (*format) {
    324a:	307c 0008      	moveaw #8,%a0
        if (flags & FLAGS_PRECISION) {
    324e:	0801 000a      	btst #10,%d1
    3252:	6600 00dc      	bnew 3330 <_vsnprintf+0x636>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    3256:	70f3           	moveq #-13,%d0
    3258:	c280           	andl %d0,%d1
          if (flags & FLAGS_LONG_LONG) {
    325a:	0801 0009      	btst #9,%d1
    325e:	6600 faec      	bnew 2d4c <_vsnprintf+0x52>
            const long value = va_arg(va, long);
    3262:	2803           	movel %d3,%d4
    3264:	5884           	addql #4,%d4
          else if (flags & FLAGS_LONG) {
    3266:	0801 0008      	btst #8,%d1
    326a:	6600 0242      	bnew 34ae <_vsnprintf+0x7b4>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    326e:	0801 0006      	btst #6,%d1
    3272:	6600 01d0      	bnew 3444 <_vsnprintf+0x74a>
    3276:	2243           	moveal %d3,%a1
    3278:	2011           	movel %a1@,%d0
    327a:	4a01           	tstb %d1
    327c:	6a06           	bpls 3284 <_vsnprintf+0x58a>
    327e:	0280 0000 ffff 	andil #65535,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3284:	2f01           	movel %d1,%sp@-
    3286:	2f0b           	movel %a3,%sp@-
    3288:	2f07           	movel %d7,%sp@-
    328a:	2f08           	movel %a0,%sp@-
    328c:	42a7           	clrl %sp@-
    328e:	2f00           	movel %d0,%sp@-
    3290:	2f02           	movel %d2,%sp@-
    3292:	2f0a           	movel %a2,%sp@-
    3294:	2f06           	movel %d6,%sp@-
    3296:	2f0d           	movel %a5,%sp@-
    3298:	4eb9 0000 2686 	jsr 2686 <_ntoa_long>
    329e:	2440           	moveal %d0,%a2
    32a0:	4fef 0028      	lea %sp@(40),%sp
    32a4:	2604           	movel %d4,%d3
  while (*format)
    32a6:	1014           	moveb %a4@,%d0
    32a8:	6600 fa82      	bnew 2d2c <_vsnprintf+0x32>
    32ac:	6000 faa2      	braw 2d50 <_vsnprintf+0x56>
    32b0:	2643           	moveal %d3,%a3
    32b2:	244c           	moveal %a4,%a2
    32b4:	2847           	moveal %d7,%a4
        if (flags & FLAGS_LEFT) {
    32b6:	4aaf 0034      	tstl %sp@(52)
    32ba:	6724           	beqs 32e0 <_vsnprintf+0x5e6>
    32bc:	2a0a           	movel %a2,%d5
          while (l++ < width) {
    32be:	b88b           	cmpl %a3,%d4
    32c0:	641e           	bccs 32e0 <_vsnprintf+0x5e6>
    32c2:	45f3 a800      	lea %a3@(0,%a2:l),%a2
    32c6:	95c4           	subal %d4,%a2
            out(' ', buffer, idx++, maxlen);
    32c8:	2005           	movel %d5,%d0
    32ca:	5285           	addql #1,%d5
    32cc:	2f02           	movel %d2,%sp@-
    32ce:	2f00           	movel %d0,%sp@-
    32d0:	2f06           	movel %d6,%sp@-
    32d2:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    32d6:	4e95           	jsr %a5@
          while (l++ < width) {
    32d8:	4fef 0010      	lea %sp@(16),%sp
    32dc:	ba8a           	cmpl %a2,%d5
    32de:	66e8           	bnes 32c8 <_vsnprintf+0x5ce>
        const char* p = va_arg(va, char*);
    32e0:	262f 0030      	movel %sp@(48),%d3
  while (*format)
    32e4:	1014           	moveb %a4@,%d0
    32e6:	6600 fa44      	bnew 2d2c <_vsnprintf+0x32>
    32ea:	6000 fa64      	braw 2d50 <_vsnprintf+0x56>
  return (unsigned int)(s - str);
    32ee:	2808           	movel %a0,%d4
    32f0:	9883           	subl %d3,%d4
    32f2:	6000 fe22      	braw 3116 <_vsnprintf+0x41c>
          flags |= FLAGS_CHAR;
    32f6:	703f           	moveq #63,%d0
    32f8:	4600           	notb %d0
    32fa:	8280           	orl %d0,%d1
          format++;
    32fc:	280c           	movel %a4,%d4
    32fe:	5484           	addql #2,%d4
    switch (*format) {
    3300:	102c 0002      	moveb %a4@(2),%d0
        format++;
    3304:	2844           	moveal %d4,%a4
    3306:	528c           	addql #1,%a4
    switch (*format) {
    3308:	0c00 0078      	cmpib #120,%d0
    330c:	6f00 fb02      	blew 2e10 <_vsnprintf+0x116>
    3310:	6000 fc94      	braw 2fa6 <_vsnprintf+0x2ac>
          flags |= FLAGS_LONG_LONG;
    3314:	0041 0300      	oriw #768,%d1
          format++;
    3318:	280c           	movel %a4,%d4
    331a:	5484           	addql #2,%d4
    switch (*format) {
    331c:	102c 0002      	moveb %a4@(2),%d0
        format++;
    3320:	2844           	moveal %d4,%a4
    3322:	528c           	addql #1,%a4
    switch (*format) {
    3324:	0c00 0078      	cmpib #120,%d0
    3328:	6f00 fae6      	blew 2e10 <_vsnprintf+0x116>
    332c:	6000 fc78      	braw 2fa6 <_vsnprintf+0x2ac>
          flags &= ~FLAGS_ZEROPAD;
    3330:	70f2           	moveq #-14,%d0
    3332:	c280           	andl %d0,%d1
        if ((*format == 'i') || (*format == 'd')) {
    3334:	6000 ff24      	braw 325a <_vsnprintf+0x560>
    switch (*format) {
    3338:	0c00 0058      	cmpib #88,%d0
    333c:	6600 fc68      	bnew 2fa6 <_vsnprintf+0x2ac>
          flags |= FLAGS_UPPERCASE;
    3340:	7a20           	moveq #32,%d5
    3342:	8285           	orl %d5,%d1
    3344:	307c 0010      	moveaw #16,%a0
    3348:	6000 ff04      	braw 324e <_vsnprintf+0x554>
          while (l++ < width) {
    334c:	7001           	moveq #1,%d0
    334e:	b08b           	cmpl %a3,%d0
    3350:	6400 011c      	bccw 346e <_vsnprintf+0x774>
    3354:	41f3 a8ff      	lea %a3@(ffffffffffffffff,%a2:l),%a0
    3358:	2e08           	movel %a0,%d7
    335a:	280a           	movel %a2,%d4
            out(' ', buffer, idx++, maxlen);
    335c:	2004           	movel %d4,%d0
    335e:	5284           	addql #1,%d4
    3360:	2f02           	movel %d2,%sp@-
    3362:	2f00           	movel %d0,%sp@-
    3364:	2f06           	movel %d6,%sp@-
    3366:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    336a:	4e95           	jsr %a5@
          while (l++ < width) {
    336c:	4fef 0010      	lea %sp@(16),%sp
    3370:	b887           	cmpl %d7,%d4
    3372:	66e8           	bnes 335c <_vsnprintf+0x662>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    3374:	d5cb           	addal %a3,%a2
    3376:	2f02           	movel %d2,%sp@-
    3378:	2f07           	movel %d7,%sp@-
    337a:	2f06           	movel %d6,%sp@-
    337c:	2243           	moveal %d3,%a1
    337e:	2011           	movel %a1@,%d0
    3380:	4880           	extw %d0
    3382:	3040           	moveaw %d0,%a0
    3384:	2f08           	movel %a0,%sp@-
    3386:	4e95           	jsr %a5@
    3388:	4fef 0010      	lea %sp@(16),%sp
    338c:	2605           	movel %d5,%d3
    338e:	6000 fe42      	braw 31d2 <_vsnprintf+0x4d8>
          while (l++ < width) {
    3392:	b88b           	cmpl %a3,%d4
    3394:	6400 0162      	bccw 34f8 <_vsnprintf+0x7fe>
    3398:	200b           	movel %a3,%d0
    339a:	d08a           	addl %a2,%d0
    339c:	9084           	subl %d4,%d0
    339e:	2800           	movel %d0,%d4
    33a0:	2a09           	movel %a1,%d5
            out(' ', buffer, idx++, maxlen);
    33a2:	200a           	movel %a2,%d0
    33a4:	528a           	addql #1,%a2
    33a6:	2f02           	movel %d2,%sp@-
    33a8:	2f00           	movel %d0,%sp@-
    33aa:	2f06           	movel %d6,%sp@-
    33ac:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    33b0:	4e95           	jsr %a5@
          while (l++ < width) {
    33b2:	4fef 0010      	lea %sp@(16),%sp
    33b6:	b5c4           	cmpal %d4,%a2
    33b8:	66e8           	bnes 33a2 <_vsnprintf+0x6a8>
    33ba:	2245           	moveal %d5,%a1
    33bc:	280b           	movel %a3,%d4
    33be:	5284           	addql #1,%d4
    33c0:	2043           	moveal %d3,%a0
    33c2:	1f50 002f      	moveb %a0@,%sp@(47)
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    33c6:	102f 002f      	moveb %sp@(47),%d0
    33ca:	6700 ff14      	beqw 32e0 <_vsnprintf+0x5e6>
    33ce:	220a           	movel %a2,%d1
    33d0:	2a09           	movel %a1,%d5
    33d2:	204b           	moveal %a3,%a0
    33d4:	2643           	moveal %d3,%a3
    33d6:	224c           	moveal %a4,%a1
    33d8:	284a           	moveal %a2,%a4
    33da:	2447           	moveal %d7,%a2
    33dc:	2e09           	movel %a1,%d7
    33de:	2608           	movel %a0,%d3
    33e0:	6000 fd74      	braw 3156 <_vsnprintf+0x45c>
    switch (*format) {
    33e4:	307c 0010      	moveaw #16,%a0
    33e8:	0c00 0078      	cmpib #120,%d0
    33ec:	6700 fe60      	beqw 324e <_vsnprintf+0x554>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    33f0:	70ef           	moveq #-17,%d0
    33f2:	c280           	andl %d0,%d1
    33f4:	307c 000a      	moveaw #10,%a0
    33f8:	6000 fe54      	braw 324e <_vsnprintf+0x554>
    switch (*format) {
    33fc:	307c 0002      	moveaw #2,%a0
    3400:	6000 fe4c      	braw 324e <_vsnprintf+0x554>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    3404:	2243           	moveal %d3,%a1
    3406:	2011           	movel %a1@,%d0
    3408:	4880           	extw %d0
    340a:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    340c:	2f04           	movel %d4,%sp@-
    340e:	2f0b           	movel %a3,%sp@-
    3410:	2f07           	movel %d7,%sp@-
    3412:	4878 000a      	pea a <DUART_IMR>
    3416:	2200           	movel %d0,%d1
    3418:	d281           	addl %d1,%d1
    341a:	9381           	subxl %d1,%d1
    341c:	4481           	negl %d1
    341e:	2f01           	movel %d1,%sp@-
    3420:	4a80           	tstl %d0
    3422:	6c00 fc28      	bgew 304c <_vsnprintf+0x352>
    3426:	4480           	negl %d0
    3428:	2f00           	movel %d0,%sp@-
    342a:	2f02           	movel %d2,%sp@-
    342c:	2f0a           	movel %a2,%sp@-
    342e:	2f06           	movel %d6,%sp@-
    3430:	2f0d           	movel %a5,%sp@-
    3432:	4eb9 0000 2686 	jsr 2686 <_ntoa_long>
    3438:	2440           	moveal %d0,%a2
    343a:	4fef 0028      	lea %sp@(40),%sp
    343e:	2605           	movel %d5,%d3
    3440:	6000 fc22      	braw 3064 <_vsnprintf+0x36a>
    3444:	7000           	moveq #0,%d0
    3446:	4600           	notb %d0
    3448:	2243           	moveal %d3,%a1
    344a:	c091           	andl %a1@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    344c:	2f01           	movel %d1,%sp@-
    344e:	2f0b           	movel %a3,%sp@-
    3450:	2f07           	movel %d7,%sp@-
    3452:	2f08           	movel %a0,%sp@-
    3454:	42a7           	clrl %sp@-
    3456:	2f00           	movel %d0,%sp@-
    3458:	6000 fe36      	braw 3290 <_vsnprintf+0x596>
        if ((*format != 'i') && (*format != 'd')) {
    345c:	0c00 0064      	cmpib #100,%d0
    3460:	6700 fb9e      	beqw 3000 <_vsnprintf+0x306>
    3464:	2204           	movel %d4,%d1
    3466:	307c 000a      	moveaw #10,%a0
    346a:	6000 fde2      	braw 324e <_vsnprintf+0x554>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    346e:	2f02           	movel %d2,%sp@-
    3470:	2f0a           	movel %a2,%sp@-
    3472:	2f06           	movel %d6,%sp@-
    3474:	2043           	moveal %d3,%a0
    3476:	2010           	movel %a0@,%d0
    3478:	4880           	extw %d0
    347a:	3240           	moveaw %d0,%a1
    347c:	2f09           	movel %a1,%sp@-
    347e:	4e95           	jsr %a5@
    3480:	4fef 0010      	lea %sp@(16),%sp
    3484:	2444           	moveal %d4,%a2
    3486:	2605           	movel %d5,%d3
    3488:	6000 fd48      	braw 31d2 <_vsnprintf+0x4d8>
            const long value = va_arg(va, long);
    348c:	2043           	moveal %d3,%a0
    348e:	2010           	movel %a0@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3490:	2f04           	movel %d4,%sp@-
    3492:	2f0b           	movel %a3,%sp@-
    3494:	2f07           	movel %d7,%sp@-
    3496:	4878 000a      	pea a <DUART_IMR>
    349a:	2200           	movel %d0,%d1
    349c:	d281           	addl %d1,%d1
    349e:	9381           	subxl %d1,%d1
    34a0:	4481           	negl %d1
    34a2:	2f01           	movel %d1,%sp@-
    34a4:	4a80           	tstl %d0
    34a6:	6c00 fba4      	bgew 304c <_vsnprintf+0x352>
    34aa:	6000 ff7a      	braw 3426 <_vsnprintf+0x72c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    34ae:	2f01           	movel %d1,%sp@-
    34b0:	2f0b           	movel %a3,%sp@-
    34b2:	2f07           	movel %d7,%sp@-
    34b4:	2f08           	movel %a0,%sp@-
    34b6:	42a7           	clrl %sp@-
    34b8:	2043           	moveal %d3,%a0
    34ba:	2f10           	movel %a0@,%sp@-
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    34bc:	2f02           	movel %d2,%sp@-
    34be:	2f0a           	movel %a2,%sp@-
    34c0:	2f06           	movel %d6,%sp@-
    34c2:	2f0d           	movel %a5,%sp@-
    34c4:	4eb9 0000 2686 	jsr 2686 <_ntoa_long>
    34ca:	2440           	moveal %d0,%a2
    34cc:	4fef 0028      	lea %sp@(40),%sp
    34d0:	2604           	movel %d4,%d3
        break;
    34d2:	6000 fdd2      	braw 32a6 <_vsnprintf+0x5ac>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    34d6:	2243           	moveal %d3,%a1
    34d8:	2011           	movel %a1@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    34da:	2f04           	movel %d4,%sp@-
    34dc:	2f0b           	movel %a3,%sp@-
    34de:	2f07           	movel %d7,%sp@-
    34e0:	4878 000a      	pea a <DUART_IMR>
    34e4:	2200           	movel %d0,%d1
    34e6:	d281           	addl %d1,%d1
    34e8:	9381           	subxl %d1,%d1
    34ea:	4481           	negl %d1
    34ec:	2f01           	movel %d1,%sp@-
    34ee:	4a80           	tstl %d0
    34f0:	6c00 fb5a      	bgew 304c <_vsnprintf+0x352>
    34f4:	6000 ff30      	braw 3426 <_vsnprintf+0x72c>
          while (l++ < width) {
    34f8:	5284           	addql #1,%d4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    34fa:	102f 002f      	moveb %sp@(47),%d0
    34fe:	6600 fece      	bnew 33ce <_vsnprintf+0x6d4>
    3502:	6000 fddc      	braw 32e0 <_vsnprintf+0x5e6>

00003506 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    3506:	4e56 fffc      	linkw %fp,#-4
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    350a:	486e 000c      	pea %fp@(12)
    350e:	2f2e 0008      	movel %fp@(8),%sp@-
    3512:	4878 ffff      	pea ffffffff <DUART_BASE_R2+0xff07ff57>
    3516:	486e ffff      	pea %fp@(-1)
    351a:	4879 0000 2ce2 	pea 2ce2 <_out_char>
    3520:	4eb9 0000 2cfa 	jsr 2cfa <_vsnprintf>
  va_end(va);
  return ret;
    3526:	4fef 0014      	lea %sp@(20),%sp
}
    352a:	4e5e           	unlk %fp
    352c:	4e75           	rts

0000352e <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
    352e:	4e56 0000      	linkw %fp,#0
  va_list va;
  va_start(va, format);
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    3532:	486e 0010      	pea %fp@(16)
    3536:	2f2e 000c      	movel %fp@(12),%sp@-
    353a:	4878 ffff      	pea ffffffff <DUART_BASE_R2+0xff07ff57>
    353e:	2f2e 0008      	movel %fp@(8),%sp@-
    3542:	4879 0000 266c 	pea 266c <_out_buffer>
    3548:	4eb9 0000 2cfa 	jsr 2cfa <_vsnprintf>
  va_end(va);
  return ret;
    354e:	4fef 0014      	lea %sp@(20),%sp
}
    3552:	4e5e           	unlk %fp
    3554:	4e75           	rts

00003556 <_putchar>:
static char crbuf[2] = { '\r', 0 };

/*
 * This is used by printf.
 */
void _putchar(char chr) {
    3556:	2f02           	movel %d2,%sp@-
    3558:	242f 0008      	movel %sp@(8),%d2
  if (chr == '\n') {
    355c:	0c02 000a      	cmpib #10,%d2
    3560:	6714           	beqs 3576 <_putchar+0x20>
    // is LF, print CR too
    mcPrint(crbuf);
  }

  buf[0] = chr;
    3562:	41f9 0000 452b 	lea 452b <buf>,%a0
    3568:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    356a:	2f48 0008      	movel %a0,%sp@(8)
}
    356e:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    3570:	4ef9 0000 35cc 	jmp 35cc <mcPrint>
    mcPrint(crbuf);
    3576:	4879 0000 3c8c 	pea 3c8c <crbuf>
    357c:	4eb9 0000 35cc 	jsr 35cc <mcPrint>
    3582:	588f           	addql #4,%sp
  buf[0] = chr;
    3584:	41f9 0000 452b 	lea 452b <buf>,%a0
    358a:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    358c:	2f48 0008      	movel %a0,%sp@(8)
}
    3590:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    3592:	4ef9 0000 35cc 	jmp 35cc <mcPrint>

00003598 <memset>:
        ;

    return tbuf;
}

void *memset(void *s, int c, size_t n) {
    3598:	2f02           	movel %d2,%sp@-
    359a:	202f 0008      	movel %sp@(8),%d0
    // totally naive implementation, will do for now...
    uint8_t *buf = (uint8_t*) s;

    for (uint8_t *end = buf + n; buf < end; *buf++ = c)
    359e:	2200           	movel %d0,%d1
    35a0:	d2af 0010      	addl %sp@(16),%d1
    35a4:	b280           	cmpl %d0,%d1
    35a6:	630c           	blss 35b4 <memset+0x1c>
    35a8:	142f 000f      	moveb %sp@(15),%d2
    uint8_t *buf = (uint8_t*) s;
    35ac:	2040           	moveal %d0,%a0
    for (uint8_t *end = buf + n; buf < end; *buf++ = c)
    35ae:	10c2           	moveb %d2,%a0@+
    35b0:	b1c1           	cmpal %d1,%a0
    35b2:	66fa           	bnes 35ae <memset+0x16>
        ;

    return s;
}
    35b4:	241f           	movel %sp@+,%d2
    35b6:	4e75           	rts

000035b8 <strlen>:
		;

	return s1;
}

size_t strlen(const char *s) {
    35b8:	206f 0004      	moveal %sp@(4),%a0
    size_t i;
    for (i = 0; s[i] != '\0'; i++) ;
    35bc:	7000           	moveq #0,%d0
    35be:	4a10           	tstb %a0@
    35c0:	6708           	beqs 35ca <strlen+0x12>
    35c2:	5280           	addql #1,%d0
    35c4:	4a30 0800      	tstb %a0@(0,%d0:l)
    35c8:	66f8           	bnes 35c2 <strlen+0xa>
    return i;
}
    35ca:	4e75           	rts

000035cc <mcPrint>:
    35cc:	48e7 c080      	moveml %d0-%d1/%a0,%sp@-
    35d0:	206f 0010      	moveal %sp@(16),%a0
    35d4:	7200           	moveq #0,%d1
    35d6:	4e4e           	trap #14
    35d8:	4cdf 0103      	moveml %sp@+,%d0-%d1/%a0
    35dc:	4e75           	rts

000035de <__kinit>:

void *__dso_handle;

__attribute__((weak)) void __kinit() {
  // zero .bss
  for (uint32_t *dst = &_bss_start; dst < &_bss_end; *dst++ = 0);
    35de:	41f9 0000 3c90 	lea 3c90 <ascii.0>,%a0
    35e4:	b1fc 0000 7d30 	cmpal #32048,%a0
    35ea:	641c           	bccs 3608 <__kinit+0x2a>
    35ec:	203c 0000 7d30 	movel #32048,%d0
    35f2:	0480 0000 3c91 	subil #15505,%d0
    35f8:	72fc           	moveq #-4,%d1
    35fa:	c081           	andl %d1,%d0
    35fc:	0680 0000 3c94 	addil #15508,%d0
    3602:	4298           	clrl %a0@+
    3604:	b088           	cmpl %a0,%d0
    3606:	66fa           	bnes 3602 <__kinit+0x24>
}
    3608:	4e75           	rts

0000360a <__cxa_finalize>:
/*
 * We probably don't need the full dso_handle capability as we're always
 * statically linked, but I'd rather do a proper impl now than have it 
 * break later because of a half-baked one :D
 */
void __cxa_finalize(void *dso_handle) {
    360a:	48e7 3020      	moveml %d2-%d3/%a2,%sp@-
    360e:	262f 0010      	movel %sp@(16),%d3
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    3612:	7200           	moveq #0,%d1
    3614:	3239 0000 452e 	movew 452e <cxa_atexit_count>,%d1
    361a:	2401           	movel %d1,%d2
    361c:	5382           	subql #1,%d2
    361e:	4a81           	tstl %d1
    3620:	6738           	beqs 365a <__cxa_finalize+0x50>
    3622:	2001           	movel %d1,%d0
    3624:	e788           	lsll #3,%d0
    3626:	2440           	moveal %d0,%a2
    3628:	95c1           	subal %d1,%a2
    362a:	d5ca           	addal %a2,%a2
    362c:	d5fc 0000 4522 	addal #17698,%a2
        cxa_atexit_entry *entry = &cxa_atexits[i];

        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    3632:	4a83           	tstl %d3
    3634:	662a           	bnes 3660 <__cxa_finalize+0x56>
    3636:	4a2a 000c      	tstb %a2@(12)
    363a:	6610           	bnes 364c <__cxa_finalize+0x42>
            entry->func(entry->ptr);
    363c:	2f2a 0004      	movel %a2@(4),%sp@-
    3640:	2052           	moveal %a2@,%a0
    3642:	4e90           	jsr %a0@
            entry->done = true;
    3644:	157c 0001 000c 	moveb #1,%a2@(12)
    364a:	588f           	addql #4,%sp
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    364c:	45ea fff2      	lea %a2@(-14),%a2
    3650:	51ca ffe0      	dbf %d2,3632 <__cxa_finalize+0x28>
    3654:	4242           	clrw %d2
    3656:	5382           	subql #1,%d2
    3658:	64d8           	bccs 3632 <__cxa_finalize+0x28>
        }
    }
}
    365a:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    365e:	4e75           	rts
        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    3660:	b6aa 0008      	cmpl %a2@(8),%d3
    3664:	67d0           	beqs 3636 <__cxa_finalize+0x2c>
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    3666:	45ea fff2      	lea %a2@(-14),%a2
    366a:	51ca fff4      	dbf %d2,3660 <__cxa_finalize+0x56>
    366e:	4242           	clrw %d2
    3670:	5382           	subql #1,%d2
    3672:	64ec           	bccs 3660 <__cxa_finalize+0x56>
}
    3674:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    3678:	4e75           	rts
	...

0000367c <__mulsi3>:
    367c:	302f 0004      	movew %sp@(4),%d0
    3680:	c0ef 000a      	muluw %sp@(10),%d0
    3684:	322f 0006      	movew %sp@(6),%d1
    3688:	c2ef 0008      	muluw %sp@(8),%d1
    368c:	d041           	addw %d1,%d0
    368e:	4840           	swap %d0
    3690:	4240           	clrw %d0
    3692:	322f 0006      	movew %sp@(6),%d1
    3696:	c2ef 000a      	muluw %sp@(10),%d1
    369a:	d081           	addl %d1,%d0
    369c:	4e75           	rts
	...

000036a0 <__udivsi3>:
    36a0:	2f02           	movel %d2,%sp@-
    36a2:	222f 000c      	movel %sp@(12),%d1
    36a6:	202f 0008      	movel %sp@(8),%d0
    36aa:	0c81 0001 0000 	cmpil #65536,%d1
    36b0:	6416           	bccs 36c8 <L3>
    36b2:	2400           	movel %d0,%d2
    36b4:	4242           	clrw %d2
    36b6:	4842           	swap %d2
    36b8:	84c1           	divuw %d1,%d2
    36ba:	3002           	movew %d2,%d0
    36bc:	4840           	swap %d0
    36be:	342f 000a      	movew %sp@(10),%d2
    36c2:	84c1           	divuw %d1,%d2
    36c4:	3002           	movew %d2,%d0
    36c6:	6030           	bras 36f8 <L6>

000036c8 <L3>:
    36c8:	2401           	movel %d1,%d2

000036ca <L4>:
    36ca:	e289           	lsrl #1,%d1
    36cc:	e288           	lsrl #1,%d0
    36ce:	0c81 0001 0000 	cmpil #65536,%d1
    36d4:	64f4           	bccs 36ca <L4>
    36d6:	80c1           	divuw %d1,%d0
    36d8:	0280 0000 ffff 	andil #65535,%d0
    36de:	2202           	movel %d2,%d1
    36e0:	c2c0           	muluw %d0,%d1
    36e2:	4842           	swap %d2
    36e4:	c4c0           	muluw %d0,%d2
    36e6:	4842           	swap %d2
    36e8:	4a42           	tstw %d2
    36ea:	660a           	bnes 36f6 <L5>
    36ec:	d282           	addl %d2,%d1
    36ee:	6506           	bcss 36f6 <L5>
    36f0:	b2af 0008      	cmpl %sp@(8),%d1
    36f4:	6302           	blss 36f8 <L6>

000036f6 <L5>:
    36f6:	5380           	subql #1,%d0

000036f8 <L6>:
    36f8:	241f           	movel %sp@+,%d2
    36fa:	4e75           	rts

000036fc <__umodsi3>:
    36fc:	222f 0008      	movel %sp@(8),%d1
    3700:	202f 0004      	movel %sp@(4),%d0
    3704:	2f01           	movel %d1,%sp@-
    3706:	2f00           	movel %d0,%sp@-
    3708:	4eb9 0000 36a0 	jsr 36a0 <__udivsi3>
    370e:	508f           	addql #8,%sp
    3710:	222f 0008      	movel %sp@(8),%d1
    3714:	2f01           	movel %d1,%sp@-
    3716:	2f00           	movel %d0,%sp@-
    3718:	4eb9 0000 367c 	jsr 367c <__mulsi3>
    371e:	508f           	addql #8,%sp
    3720:	222f 0004      	movel %sp@(4),%d1
    3724:	9280           	subl %d0,%d1
    3726:	2001           	movel %d1,%d0
    3728:	4e75           	rts
    372a:	5b20           	subqb #5,%a0@-
    372c:	0025 7320      	orib #32,%a5@-
    3730:	005d 004e      	oriw #78,%a5@+
    3734:	6f74           	bles 37aa <__umodsi3+0xae>
    3736:	2052           	moveal %a2@,%a0
    3738:	656d           	bcss 37a7 <__umodsi3+0xab>
    373a:	6f76           	bles 37b2 <__umodsi3+0xb6>
    373c:	6162           	bsrs 37a0 <__umodsi3+0xa4>
    373e:	6c65           	bges 37a5 <__umodsi3+0xa9>
    3740:	2063           	moveal %a3@-,%a0
    3742:	6f6e           	bles 37b2 <__umodsi3+0xb6>
    3744:	7472           	moveq #114,%d2
    3746:	6f6c           	bles 37b4 <__umodsi3+0xb8>
    3748:	6c65           	bges 37af <__umodsi3+0xb3>
    374a:	7220           	moveq #32,%d1
    374c:	616e           	bsrs 37bc <__umodsi3+0xc0>
    374e:	642f           	bccs 377f <__umodsi3+0x83>
    3750:	6f72           	bles 37c4 <__umodsi3+0xc8>
    3752:	2064           	moveal %a4@-,%a0
    3754:	6576           	bcss 37cc <__umodsi3+0xd0>
    3756:	6963           	bvss 37bb <__umodsi3+0xbf>
    3758:	6500 5265      	bcsw 89bf <_bss_end+0xc8f>
    375c:	6d6f           	blts 37cd <__umodsi3+0xd1>
    375e:	7661           	moveq #97,%d3
    3760:	626c           	bhis 37ce <__umodsi3+0xd2>
    3762:	6520           	bcss 3784 <__umodsi3+0x88>
    3764:	6d65           	blts 37cb <__umodsi3+0xcf>
    3766:	6469           	bccs 37d1 <__umodsi3+0xd5>
    3768:	6120           	bsrs 378a <__umodsi3+0x8e>
    376a:	6465           	bccs 37d1 <__umodsi3+0xd5>
    376c:	7669           	moveq #105,%d3
    376e:	6365           	blss 37d5 <__umodsi3+0xd9>
    3770:	0041 5441      	oriw #21569,%d1
    3774:	5049           	addqw #8,%a1
    3776:	0041 5441      	oriw #21569,%d1
    377a:	0061 7265      	oriw #29285,%a1@-
    377e:	006d 6179 2062 	oriw #24953,%a5@(8290)
    3784:	6500 5b30      	bcsw 92b6 <_bss_end+0x1586>
    3788:	5d20           	subqb #6,%a0@-
    378a:	2573 2025 7320 	movel %a3@(25,%d2:w),%a2@(29472)
    3790:	2573 0d0a 005b 	movel %a3@(0,%d0:l:4)@(5b),%a2@(12637)
    3796:	315d 
    3798:	204c           	moveal %a4,%a0
    379a:	6f67           	bles 3803 <__umodsi3+0x107>
    379c:	6963           	bvss 3801 <__umodsi3+0x105>
    379e:	616c           	bsrs 380c <__umodsi3+0x110>
    37a0:	2063           	moveal %a3@-,%a0
    37a2:	796c           	.short 0x796c
    37a4:	696e           	bvss 3814 <__umodsi3+0x118>
    37a6:	6465           	bccs 380d <__umodsi3+0x111>
    37a8:	7273           	moveq #115,%d1
    37aa:	203d           	.short 0x203d
    37ac:	2025           	movel %a5@-,%d0
    37ae:	750d           	.short 0x750d
    37b0:	0a00 5b33      	eorib #51,%d0
    37b4:	5d20           	subqb #6,%a0@-
    37b6:	4c6f           	.short 0x4c6f
    37b8:	6769           	beqs 3823 <__umodsi3+0x127>
    37ba:	6361           	blss 381d <__umodsi3+0x121>
    37bc:	6c20           	bges 37de <__umodsi3+0xe2>
    37be:	6865           	bvcs 3825 <__umodsi3+0x129>
    37c0:	6164           	bsrs 3826 <__umodsi3+0x12a>
    37c2:	7320           	.short 0x7320
    37c4:	3d20           	movew %a0@-,%fp@-
    37c6:	2575 0d0a 005b 	movel %a5@(0,%d0:l:4)@(5b),%a2@(13917)
    37cc:	365d 
    37ce:	204c           	moveal %a4,%a0
    37d0:	6f67           	bles 3839 <__umodsi3+0x13d>
    37d2:	6963           	bvss 3837 <__umodsi3+0x13b>
    37d4:	616c           	bsrs 3842 <__umodsi3+0x146>
    37d6:	2073 6563 746f 	moveal %a3@(746f)@(72732070),%a0
    37dc:	7273 2070 
    37e0:	6572           	bcss 3854 <__umodsi3+0x158>
    37e2:	206c 6f67      	moveal %a4@(28519),%a0
    37e6:	6963           	bvss 384b <__umodsi3+0x14f>
    37e8:	616c           	bsrs 3856 <__umodsi3+0x15a>
    37ea:	2074 7261      	moveal %a4@(61,%d7:w:2),%a0
    37ee:	636b           	blss 385b <__umodsi3+0x15f>
    37f0:	203d           	.short 0x203d
    37f2:	2025           	movel %a5@-,%d0
    37f4:	750d           	.short 0x750d
    37f6:	0a00 5b31      	eorib #49,%d0
    37fa:	302d 3139      	movew %a5@(12601),%d0
    37fe:	5d20           	subqb #6,%a0@-
    3800:	5365           	subqw #1,%a5@-
    3802:	7269           	moveq #105,%d1
    3804:	616c           	bsrs 3872 <__umodsi3+0x176>
    3806:	206e 756d      	moveal %fp@(30061),%a0
    380a:	6265           	bhis 3871 <__umodsi3+0x175>
    380c:	7220           	moveq #32,%d1
    380e:	3d20           	movew %a0@-,%fp@-
    3810:	2225           	movel %a5@-,%d1
    3812:	2e32 3073      	movel %a2@(73,%d3:w),%d7
    3816:	220d           	movel %a5,%d1
    3818:	0a00 5b32      	eorib #50,%d0
    381c:	325d           	moveaw %a5@+,%a1
    381e:	2056           	moveal %fp@,%a0
    3820:	656e           	bcss 3890 <__umodsi3+0x194>
    3822:	646f           	bccs 3893 <__umodsi3+0x197>
    3824:	722d           	moveq #45,%d1
    3826:	7370           	.short 0x7370
    3828:	6563           	bcss 388d <__umodsi3+0x191>
    382a:	6963           	bvss 388f <__umodsi3+0x193>
    382c:	2062           	moveal %a2@-,%a0
    382e:	7974           	.short 0x7974
    3830:	6573           	bcss 38a5 <__umodsi3+0x1a9>
    3832:	2061           	moveal %a1@-,%a0
    3834:	7661           	moveq #97,%d3
    3836:	696c           	bvss 38a4 <__umodsi3+0x1a8>
    3838:	6162           	bsrs 389c <__umodsi3+0x1a0>
    383a:	6c65           	bges 38a1 <__umodsi3+0x1a5>
    383c:	206f 6e20      	moveal %sp@(28192),%a0
    3840:	5245           	addqw #1,%d5
    3842:	4144           	.short 0x4144
    3844:	2f57 5249      	movel %sp@,%sp@(21065)
    3848:	5445           	addqw #2,%d5
    384a:	204c           	moveal %a4,%a0
    384c:	4f4e           	.short 0x4f4e
    384e:	4720           	.short 0x4720
    3850:	636f           	blss 38c1 <__umodsi3+0x1c5>
    3852:	6d6d           	blts 38c1 <__umodsi3+0x1c5>
    3854:	616e           	bsrs 38c4 <__umodsi3+0x1c8>
    3856:	6473           	bccs 38cb <__umodsi3+0x1cf>
    3858:	203d           	.short 0x203d
    385a:	2025           	movel %a5@-,%d0
    385c:	750d           	.short 0x750d
    385e:	0a00 5b32      	eorib #50,%d0
    3862:	332d 3236      	movew %a5@(12854),%a1@-
    3866:	5d20           	subqb #6,%a0@-
    3868:	4669 726d      	notw %a1@(29293)
    386c:	7761           	.short 0x7761
    386e:	7265           	moveq #101,%d1
    3870:	2072 6576 6973 	moveal %a2@(6973696f)@(6e20),%a0
    3876:	696f 6e20 
    387a:	3d20           	movew %a0@-,%fp@-
    387c:	2225           	movel %a5@-,%d1
    387e:	2e38 7322      	movel 7322 <cxa_atexits+0x2df2>,%d7
    3882:	0d0a 005b      	movepw %a2@(91),%d6
    3886:	3237 2d34 365d 	movew %sp@(365d204d)@(0,%d2:l:4),%d1
    388c:	204d 
    388e:	6f64           	bles 38f4 <__umodsi3+0x1f8>
    3890:	656c           	bcss 38fe <__umodsi3+0x202>
    3892:	206e 756d      	moveal %fp@(30061),%a0
    3896:	6265           	bhis 38fd <__umodsi3+0x201>
    3898:	7220           	moveq #32,%d1
    389a:	3d20           	movew %a0@-,%fp@-
    389c:	2225           	movel %a5@-,%d1
    389e:	2e34 3073      	movel %a4@(73,%d3:w),%d7
    38a2:	220d           	movel %a5,%d1
    38a4:	0a00 5b34      	eorib #52,%d0
    38a8:	375d 204d      	movew %a5@+,%a3@(8269)
    38ac:	6178           	bsrs 3926 <__umodsi3+0x22a>
    38ae:	206e 756d      	moveal %fp@(30061),%a0
    38b2:	6265           	bhis 3919 <__umodsi3+0x21d>
    38b4:	7220           	moveq #32,%d1
    38b6:	6f66           	bles 391e <__umodsi3+0x222>
    38b8:	2073 6563 746f 	moveal %a3@(746f)@(72732074),%a0
    38be:	7273 2074 
    38c2:	6861           	bvcs 3925 <__umodsi3+0x229>
    38c4:	7420           	moveq #32,%d2
    38c6:	6361           	blss 3929 <__umodsi3+0x22d>
    38c8:	6e20           	bgts 38ea <__umodsi3+0x1ee>
    38ca:	6265           	bhis 3931 <__umodsi3+0x235>
    38cc:	2074 7261      	moveal %a4@(61,%d7:w:2),%a0
    38d0:	6e73           	bgts 3945 <__umodsi3+0x249>
    38d2:	6665           	bnes 3939 <__umodsi3+0x23d>
    38d4:	7272           	moveq #114,%d1
    38d6:	6564           	bcss 393c <__umodsi3+0x240>
    38d8:	2070 6572 2069 	moveal %a0@(20696e74)@(6572),%a0
    38de:	6e74 6572 
    38e2:	7275           	moveq #117,%d1
    38e4:	7074           	moveq #116,%d0
    38e6:	206f 6e20      	moveal %sp@(28192),%a0
    38ea:	5245           	addqw #1,%d5
    38ec:	4144           	.short 0x4144
    38ee:	2f57 5249      	movel %sp@,%sp@(21065)
    38f2:	5445           	addqw #2,%d5
    38f4:	204d           	moveal %a5,%a0
    38f6:	554c           	subqw #2,%a4
    38f8:	5449           	addqw #2,%a1
    38fa:	504c           	addqw #8,%a4
    38fc:	4520           	.short 0x4520
    38fe:	3d20           	movew %a0@-,%fp@-
    3900:	2575 0d0a 005b 	movel %a5@(0,%d0:l:4)@(5b),%a2@(13619)
    3906:	3533 
    3908:	5d20           	subqb #6,%a0@-
    390a:	5468 6520      	addqw #2,%a0@(25888)
    390e:	6669           	bnes 3979 <__umodsi3+0x27d>
    3910:	656c           	bcss 397e <__umodsi3+0x282>
    3912:	6473           	bccs 3987 <__umodsi3+0x28b>
    3914:	2069 6e20      	moveal %a1@(28192),%a0
    3918:	5b35 342d      	subqb #5,%a5@(2d,%d3:w:4)
    391c:	3538 5d20      	movew 5d20 <cxa_atexits+0x17f0>,%a2@-
    3920:	2573 2076 616c 	movel %a3@(76,%d2:w),%a2@(24940)
    3926:	6964           	bvss 398c <__umodsi3+0x290>
    3928:	0d0a 005b      	movepw %a2@(91),%d6
    392c:	3534 5d20 4e75 	movew %a4@(4e75,%d5:l:4),%a2@-
    3932:	6d62           	blts 3996 <__umodsi3+0x29a>
    3934:	6572           	bcss 39a8 <__umodsi3+0x2ac>
    3936:	206f 6620      	moveal %sp@(26144),%a0
    393a:	6375           	blss 39b1 <__umodsi3+0x2b5>
    393c:	7272           	moveq #114,%d1
    393e:	656e           	bcss 39ae <__umodsi3+0x2b2>
    3940:	7420           	moveq #32,%d2
    3942:	6c6f           	bges 39b3 <__umodsi3+0x2b7>
    3944:	6769           	beqs 39af <__umodsi3+0x2b3>
    3946:	6361           	blss 39a9 <__umodsi3+0x2ad>
    3948:	6c20           	bges 396a <__umodsi3+0x26e>
    394a:	6379           	blss 39c5 <__umodsi3+0x2c9>
    394c:	6c69           	bges 39b7 <__umodsi3+0x2bb>
    394e:	6e64           	bgts 39b4 <__umodsi3+0x2b8>
    3950:	6572           	bcss 39c4 <__umodsi3+0x2c8>
    3952:	7320           	.short 0x7320
    3954:	3d20           	movew %a0@-,%fp@-
    3956:	2575 0d0a 005b 	movel %a5@(0,%d0:l:4)@(5b),%a2@(13621)
    395c:	3535 
    395e:	5d20           	subqb #6,%a0@-
    3960:	4e75           	rts
    3962:	6d62           	blts 39c6 <__umodsi3+0x2ca>
    3964:	6572           	bcss 39d8 <__umodsi3+0x2dc>
    3966:	206f 6620      	moveal %sp@(26144),%a0
    396a:	6375           	blss 39e1 <__umodsi3+0x2e5>
    396c:	7272           	moveq #114,%d1
    396e:	656e           	bcss 39de <__umodsi3+0x2e2>
    3970:	7420           	moveq #32,%d2
    3972:	6c6f           	bges 39e3 <__umodsi3+0x2e7>
    3974:	6769           	beqs 39df <__umodsi3+0x2e3>
    3976:	6361           	blss 39d9 <__umodsi3+0x2dd>
    3978:	6c20           	bges 399a <__umodsi3+0x29e>
    397a:	6865           	bvcs 39e1 <__umodsi3+0x2e5>
    397c:	6164           	bsrs 39e2 <__umodsi3+0x2e6>
    397e:	7320           	.short 0x7320
    3980:	3d20           	movew %a0@-,%fp@-
    3982:	2575 0d0a 005b 	movel %a5@(0,%d0:l:4)@(5b),%a2@(13622)
    3988:	3536 
    398a:	5d20           	subqb #6,%a0@-
    398c:	4e75           	rts
    398e:	6d62           	blts 39f2 <__umodsi3+0x2f6>
    3990:	6572           	bcss 3a04 <__umodsi3+0x308>
    3992:	206f 6620      	moveal %sp@(26144),%a0
    3996:	6375           	blss 3a0d <__umodsi3+0x311>
    3998:	7272           	moveq #114,%d1
    399a:	656e           	bcss 3a0a <__umodsi3+0x30e>
    399c:	7420           	moveq #32,%d2
    399e:	6c6f           	bges 3a0f <__umodsi3+0x313>
    39a0:	6769           	beqs 3a0b <__umodsi3+0x30f>
    39a2:	6361           	blss 3a05 <__umodsi3+0x309>
    39a4:	6c20           	bges 39c6 <__umodsi3+0x2ca>
    39a6:	7365           	.short 0x7365
    39a8:	6374           	blss 3a1e <__umodsi3+0x322>
    39aa:	6f72           	bles 3a1e <__umodsi3+0x322>
    39ac:	7320           	.short 0x7320
    39ae:	7065           	moveq #101,%d0
    39b0:	7220           	moveq #32,%d1
    39b2:	7472           	moveq #114,%d2
    39b4:	6163           	bsrs 3a19 <__umodsi3+0x31d>
    39b6:	6b20           	bmis 39d8 <__umodsi3+0x2dc>
    39b8:	3d20           	movew %a0@-,%fp@-
    39ba:	2575 0d0a 005b 	movel %a5@(0,%d0:l:4)@(5b),%a2@(13623)
    39c0:	3537 
    39c2:	2d35 385d      	movel %a5@(5d,%d3:l),%fp@-
    39c6:	2043           	moveal %d3,%a0
    39c8:	7572           	.short 0x7572
    39ca:	7265           	moveq #101,%d1
    39cc:	6e74           	bgts 3a42 <__umodsi3+0x346>
    39ce:	2063           	moveal %a3@-,%a0
    39d0:	6170           	bsrs 3a42 <__umodsi3+0x346>
    39d2:	6163           	bsrs 3a37 <__umodsi3+0x33b>
    39d4:	6974           	bvss 3a4a <__umodsi3+0x34e>
    39d6:	7920           	.short 0x7920
    39d8:	696e           	bvss 3a48 <__umodsi3+0x34c>
    39da:	2073 6563 746f 	moveal %a3@(746f)@(7273203d),%a0
    39e0:	7273 203d 
    39e4:	2025           	movel %a5@-,%d0
    39e6:	6c75           	bges 3a5d <__umodsi3+0x361>
    39e8:	0d0a 005b      	movepw %a2@(91),%d6
    39ec:	3630 2d36 315d 	movew %a0@(315d2054)@(6f74,%d2:l:4),%d3
    39f2:	2054 6f74 
    39f6:	616c           	bsrs 3a64 <__umodsi3+0x368>
    39f8:	206e 756d      	moveal %fp@(30061),%a0
    39fc:	6265           	bhis 3a63 <__umodsi3+0x367>
    39fe:	7220           	moveq #32,%d1
    3a00:	6f66           	bles 3a68 <__umodsi3+0x36c>
    3a02:	204c           	moveal %a4,%a0
    3a04:	4241           	clrw %d1
    3a06:	2061           	moveal %a1@-,%a0
    3a08:	6464           	bccs 3a6e <__umodsi3+0x372>
    3a0a:	7265           	moveq #101,%d1
    3a0c:	7373           	.short 0x7373
    3a0e:	6162           	bsrs 3a72 <__umodsi3+0x376>
    3a10:	6c65           	bges 3a77 <__umodsi3+0x37b>
    3a12:	2073 6563 746f 	moveal %a3@(746f)@(7273203d),%a0
    3a18:	7273 203d 
    3a1c:	2025           	movel %a5@-,%d0
    3a1e:	6c75           	bges 3a95 <__umodsi3+0x399>
    3a20:	0d0a 005b      	movepw %a2@(91),%d6
    3a24:	3830 5d20 4d61 	movew %a0@(4d61,%d5:l:4),%d4
    3a2a:	6a6f           	bpls 3a9b <__umodsi3+0x39f>
    3a2c:	7220           	moveq #32,%d1
    3a2e:	7665           	moveq #101,%d3
    3a30:	7273           	moveq #115,%d1
    3a32:	696f           	bvss 3aa3 <__umodsi3+0x3a7>
    3a34:	6e20           	bgts 3a56 <__umodsi3+0x35a>
    3a36:	6e75           	bgts 3aad <__umodsi3+0x3b1>
    3a38:	6d62           	blts 3a9c <__umodsi3+0x3a0>
    3a3a:	6572           	bcss 3aae <__umodsi3+0x3b2>
    3a3c:	203d           	.short 0x203d
    3a3e:	2025           	movel %a5@-,%d0
    3a40:	3034 580d      	movew %a4@(d,%d5:l),%d0
    3a44:	0a00 5b38      	eorib #56,%d0
    3a48:	315d 204d      	movew %a5@+,%a0@(8269)
    3a4c:	696e           	bvss 3abc <__umodsi3+0x3c0>
    3a4e:	6f72           	bles 3ac2 <__umodsi3+0x3c6>
    3a50:	2076 6572 7369 	moveal %fp@(73696f6e)@(206e),%a0
    3a56:	6f6e 206e 
    3a5a:	756d           	.short 0x756d
    3a5c:	6265           	bhis 3ac3 <__umodsi3+0x3c7>
    3a5e:	7220           	moveq #32,%d1
    3a60:	3d20           	movew %a0@-,%fp@-
    3a62:	2530 3458      	movel %a0@(58,%d3:w:4),%a2@-
    3a66:	0d0a 005b      	movepw %a2@(91),%d6
    3a6a:	3132 385d      	movew %a2@(5d,%d3:l),%a0@-
    3a6e:	2053           	moveal %a3@,%a0
    3a70:	6563           	bcss 3ad5 <__umodsi3+0x3d9>
    3a72:	7572           	.short 0x7572
    3a74:	6974           	bvss 3aea <__umodsi3+0x3ee>
    3a76:	7920           	.short 0x7920
    3a78:	5374 6174 7573 	subqw #1,%a4@(7573203d)@(0)
    3a7e:	203d 
    3a80:	2025           	movel %a5@-,%d0
    3a82:	3034 580d      	movew %a4@(d,%d5:l),%d0
    3a86:	0a00 456e      	eorib #110,%d0
    3a8a:	6162           	bsrs 3aee <__umodsi3+0x3f2>
    3a8c:	6c69           	bges 3af7 <__umodsi3+0x3fb>
    3a8e:	6e67           	bgts 3af7 <__umodsi3+0x3fb>
    3a90:	2064           	moveal %a4@-,%a0
    3a92:	6576           	bcss 3b0a <__umodsi3+0x40e>
    3a94:	6963           	bvss 3af9 <__umodsi3+0x3fd>
    3a96:	6520           	bcss 3ab8 <__umodsi3+0x3bc>
    3a98:	696e           	bvss 3b08 <__umodsi3+0x40c>
    3a9a:	7465           	moveq #101,%d2
    3a9c:	7272           	moveq #114,%d1
    3a9e:	7570           	.short 0x7570
    3aa0:	740a           	moveq #10,%d2
    3aa2:	0045 6e61      	oriw #28257,%d5
    3aa6:	626c           	bhis 3b14 <__umodsi3+0x418>
    3aa8:	6564           	bcss 3b0e <__umodsi3+0x412>
    3aaa:	0a00 4162      	eorib #98,%d0
    3aae:	6f75           	bles 3b25 <__umodsi3+0x429>
    3ab0:	7420           	moveq #32,%d2
    3ab2:	746f           	moveq #111,%d2
    3ab4:	206d 656d      	moveal %a5@(25965),%a0
    3ab8:	7365           	.short 0x7365
    3aba:	740a           	moveq #10,%d2
    3abc:	0044 6f6e      	oriw #28526,%d4
    3ac0:	6520           	bcss 3ae2 <__umodsi3+0x3e6>
    3ac2:	6d65           	blts 3b29 <__umodsi3+0x42d>
    3ac4:	6d73           	blts 3b39 <__umodsi3+0x43d>
    3ac6:	6574           	bcss 3b3c <__umodsi3+0x440>
    3ac8:	0a00 5365      	eorib #101,%d0
    3acc:	6e64           	bgts 3b32 <__umodsi3+0x436>
    3ace:	696e           	bvss 3b3e <__umodsi3+0x442>
    3ad0:	6720           	beqs 3af2 <__umodsi3+0x3f6>
    3ad2:	7468           	moveq #104,%d2
    3ad4:	6520           	bcss 3af6 <__umodsi3+0x3fa>
    3ad6:	4944           	.short 0x4944
    3ad8:	454e           	.short 0x454e
    3ada:	5449           	addqw #2,%a1
    3adc:	4659           	notw %a1@+
    3ade:	2044           	moveal %d4,%a0
    3ae0:	4556           	.short 0x4556
    3ae2:	4943           	.short 0x4943
    3ae4:	4520           	.short 0x4520
    3ae6:	636f           	blss 3b57 <__umodsi3+0x45b>
    3ae8:	6d6d           	blts 3b57 <__umodsi3+0x45b>
    3aea:	616e           	bsrs 3b5a <__umodsi3+0x45e>
    3aec:	640d           	bccs 3afb <__umodsi3+0x3ff>
    3aee:	0a00 5761      	eorib #97,%d0
    3af2:	6974           	bvss 3b68 <__umodsi3+0x46c>
    3af4:	696e           	bvss 3b64 <__umodsi3+0x468>
    3af6:	6720           	beqs 3b18 <__umodsi3+0x41c>
    3af8:	666f           	bnes 3b69 <__umodsi3+0x46d>
    3afa:	7220           	moveq #32,%d1
    3afc:	2564 2073      	movel %a4@-,%a2@(8307)
    3b00:	6563           	bcss 3b65 <__umodsi3+0x469>
    3b02:	746f           	moveq #111,%d2
    3b04:	7273           	moveq #115,%d1
    3b06:	2074 6f20 6265 	moveal %a4@(6265,%d6:l:8),%a0
    3b0c:	2072 6561 640d 	moveal %a2@(640d)@(0),%a0
    3b12:	0a00 5374      	eorib #116,%d0
    3b16:	6174           	bsrs 3b8c <__umodsi3+0x490>
    3b18:	7573           	.short 0x7573
    3b1a:	203d           	.short 0x203d
    3b1c:	2025           	movel %a5@-,%d0
    3b1e:	730d           	.short 0x730d
    3b20:	0a00 4572      	eorib #114,%d0
    3b24:	726f           	moveq #111,%d1
    3b26:	7220           	moveq #32,%d1
    3b28:	3d20           	movew %a0@-,%fp@-
    3b2a:	2025           	movel %a5@-,%d0
    3b2c:	730d           	.short 0x730d
    3b2e:	0a00 5365      	eorib #101,%d0
    3b32:	6374           	blss 3ba8 <__umodsi3+0x4ac>
    3b34:	6f72           	bles 3ba8 <__umodsi3+0x4ac>
    3b36:	206f 6666      	moveal %sp@(26214),%a0
    3b3a:	7365           	.short 0x7365
    3b3c:	7420           	moveq #32,%d2
    3b3e:	2564 0d0a      	movel %a4@-,%a2@(3338)
    3b42:	0025 3034      	orib #52,%a5@-
    3b46:	5820           	addqb #4,%a0@-
    3b48:	2d00           	movel %d0,%fp@-
    3b4a:	2025           	movel %a5@-,%d0
    3b4c:	3032 5800      	movew %a2@(0,%d5:l),%d0
    3b50:	202d 2025      	movel %a5@(8229),%d0
    3b54:	730d           	.short 0x730d
    3b56:	0a00 616d      	eorib #109,%d0
    3b5a:	6e66           	bgts 3bc2 <__umodsi3+0x4c6>
    3b5c:	0041 4d4e      	oriw #19790,%d1
    3b60:	4600           	notb %d0
    3b62:	7430           	moveq #48,%d2
    3b64:	6e66           	bgts 3bcc <__umodsi3+0x4d0>
    3b66:	0054 304e      	oriw #12366,%a4@
    3b6a:	4600           	notb %d0
    3b6c:	6162           	bsrs 3bd0 <__umodsi3+0x4d4>
    3b6e:	7274           	moveq #116,%d1
    3b70:	0041 4252      	oriw #16978,%d1
    3b74:	5400           	addqb #2,%d0
    3b76:	206d 6372      	moveal %a5@(25458),%a0
    3b7a:	0020 4d43      	orib #67,%a0@-
    3b7e:	5200           	addqb #1,%d0
    3b80:	6964           	bvss 3be6 <__umodsi3+0x4ea>
    3b82:	6e66           	bgts 3bea <__umodsi3+0x4ee>
    3b84:	0049           	.short 0x0049
    3b86:	444e           	.short 0x444e
    3b88:	4600           	notb %d0
    3b8a:	2020           	movel %a0@-,%d0
    3b8c:	6d63           	blts 3bf1 <__umodsi3+0x4f5>
    3b8e:	0020 204d      	orib #77,%a0@-
    3b92:	4300           	.short 0x4300
    3b94:	2075 6e63      	moveal %a5@(63,%d6:l:8),%a0
    3b98:	0020 554e      	orib #78,%a0@-
    3b9c:	4300           	.short 0x4300
    3b9e:	2020           	movel %a0@-,%d0
    3ba0:	2078 0020      	moveal 20 <R_STOPCNTCMD+0x2>,%a0
    3ba4:	2020           	movel %a0@-,%d0
    3ba6:	5800           	addqb #4,%d0
    3ba8:	2065           	moveal %a5@-,%a0
    3baa:	7272           	moveq #114,%d1
    3bac:	0020 4552      	orib #82,%a0@-
    3bb0:	5200           	addqb #1,%d0
    3bb2:	2069 6478      	moveal %a1@(25720),%a0
    3bb6:	0020 4944      	orib #68,%a0@-
    3bba:	5800           	addqb #4,%d0
    3bbc:	636f           	blss 3c2d <str_error_reg+0x35>
    3bbe:	7272           	moveq #114,%d1
    3bc0:	0043 4f52      	oriw #20306,%d3
    3bc4:	5200           	addqb #1,%d0
    3bc6:	2064           	moveal %a4@-,%a0
    3bc8:	7271           	moveq #113,%d1
    3bca:	0020 4452      	orib #82,%a0@-
    3bce:	5100           	subqb #8,%d0
    3bd0:	2064           	moveal %a4@-,%a0
    3bd2:	7363           	.short 0x7363
    3bd4:	0020 4453      	orib #83,%a0@-
    3bd8:	4300           	.short 0x4300
    3bda:	2020           	movel %a0@-,%d0
    3bdc:	6466           	bccs 3c44 <str_status_reg+0xc>
    3bde:	0020 2044      	orib #68,%a0@-
    3be2:	4600           	notb %d0
    3be4:	6472           	bccs 3c58 <str_status_reg+0x20>
    3be6:	6479           	bccs 3c61 <str_status_reg+0x29>
    3be8:	0044 5244      	oriw #21060,%d4
    3bec:	5900           	subqb #4,%d0
    3bee:	2062           	moveal %a2@-,%a0
    3bf0:	7379           	.short 0x7379
    3bf2:	0020 4253      	orib #83,%a0@-
    3bf6:	5900           	subqb #4,%d0

00003bf8 <str_error_reg>:
    3bf8:	0000 3b58 0000 3b5d 0000 3b62 0000 3b67     ..;X..;]..;b..;g
    3c08:	0000 3b6c 0000 3b71 0000 3b76 0000 3b7b     ..;l..;q..;v..;{
    3c18:	0000 3b80 0000 3b85 0000 3b8a 0000 3b8f     ..;...;...;...;.
    3c28:	0000 3b94 0000 3b99 0000 3b9e 0000 3ba3     ..;...;...;...;.

00003c38 <str_status_reg>:
    3c38:	0000 3ba8 0000 3bad 0000 3bb2 0000 3bb7     ..;...;...;...;.
    3c48:	0000 3bbc 0000 3bc1 0000 3bc6 0000 3bcb     ..;...;...;...;.
    3c58:	0000 3bd0 0000 3bd5 0000 3bda 0000 3bdf     ..;...;...;...;.
    3c68:	0000 3be4 0000 3be9 0000 3bee 0000 3bf3     ..;...;...;...;.
